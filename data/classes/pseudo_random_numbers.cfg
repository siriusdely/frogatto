{

	_current_pool: {type: "[int]", default: []},
	_size_of_pool: {type: "int", default: 0},
	_pool_size_multiplier: {type: "int", default: 2},  //more variants allows for more randomness runs in a given chunk of time 

	
	_last: "def([int] list) if(size(list), list[size(list)-1])",
	
	get_next_value: "_last(_current_pool)",
	iterate_random_pool: "if(size(_current_pool) > 1, shrink_pool_by_one, create_next_pool(_size_of_pool, _pool_size_multiplier))",
	shrink_pool_by_one: "set(_current_pool, _current_pool[0 : size(_current_pool) - 1])",
	create_next_pool: "def(int pool_size, int pool_size_mult) -> commands [set(_current_pool, shuffle(range(pool_size) * pool_size_mult)), set(_size_of_pool, pool_size)]",

	init_pool: 	"def( {pool_size: int, pool_depth: int} args ) -> commands [create_next_pool(args.pool_size, args.pool_depth), set(_pool_size_multiplier, args.pool_depth)]",
	

	debug: "debug(_current_pool)",
		    

}

//This class creates a pool of pseudo random numbers, which allow you the same benefit of doing e.g. 1d3 to pick one out of a set of behaviors for a character in frogatto, but with the safety of a guarantee that it's evenly distributed over a certain small interval of rolls, and that you won't get long runs of the same random value.  The main call for this is that some boss fights only allow the player to attack when the boss is in a particular "mode"; if the boss potentially never rolls this mode (as would be the case for a "true" random number), then we have no real control over the difficulty level of a fight - it could easily become impossible with a bad run of numbers.

//To use this, you need to 1]create an instance of the class (because it internally needs to store the pool it picks numbers from).  2] every time you pick a number, you need to separately query what said number is, and then cull it from the pool, in that order.  These have to be done separately because of FFL's functional nature; you can't have a function that both evaluates to a number and modifies a value.


/*  example usage:
properties: {
	_behavior_mode_prng:	{ type: "class pseudo_random_numbers", init: "construct('pseudo_random_numbers')", persistent: false }
}
on_create: "_behavior_mode_prng.init_pool({pool_size:3, pool_depth: 2})",

on_choose_mode:  "[	switch( _behavior_mode_prng.get_next_value,
								1,  do_attack,
								2,  do_idle,
								3, 	retreat_from_player ),
					_behavior_mode_prng.iterate_random_pool]",
*/