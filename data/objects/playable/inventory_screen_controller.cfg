{
	id: "inventory_screen_controller",
	prototype: ["standard_values"],
	ignore_collide: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	is_human: true,

	editor_info: {
		category: "player",
	},
	properties: {
		level_width: "level.dimensions[2]",
		level_height: "level.dimensions[3]",
		the_player: "level.suspended_level.player",
		
		get_ability_index: "def(name) index(ability_list, name)",
		
		ability_list: "the_player.ability_list",
		ability_buttons: "def([string] abilities) -> [widget]
						([] + 
						if('tongue' in abilities, add_ability_button('tongue',[2,2,22,22]) ) + 
						if('energyshot' in abilities, add_ability_button('energyshot',[24,2,43,22]) ) +
						if('firebreath' in abilities, add_ability_button('firebreath',[45,2,64,22]) ) +
						if('homingshot' in abilities, add_ability_button('homingshot',[66,2,85,22]) ) +
						if('acidbreath' in abilities, add_ability_button('acidbreath',[87,2,106,22]) )
						
						
						) where add_ability_button = def(string name, rect) [widget(me,
							{
								type: 'button',
								label: {
									type: 'image',
									image: 'gui/hud2.png',
									area: rect,
								},
								style: 'normal',
								resolution: 'double',
								wh: [58, 58],
								on_click: def() set(the_player.vars.current_ability, get_ability_index(name)),
							}) ]
						 ",
		
		item_list: "[a | a <- keys(the_player.vars.items_carried), a in the_player.item_list_full]",
		
		item_buttons: "def([string] items) -> [widget]
						([] + 
						if('greater_mana_talisman' in items, add_item_button('greater_mana_talisman',[3,129,22,148]) ) + 
						if('medium_mana_talisman' in items, add_item_button('medium_mana_talisman',[24,129,43,148]) ) +
						if('lesser_mana_talisman' in items, add_item_button('lesser_mana_talisman',[45,129,64,148]) ) +
						if('mana_container' in items, add_item_button('mana_container',[66,129,85,148]) ) 
						
						
						) where add_item_button = def(string name, rect) [widget(me,
							{
								type: 'button',
								label: {
									type: 'layout',
									style: 'absolute',
									children: [{									
										type: 'image',
										image: 'gui/hud2.png',
										area: rect,
										xy: [2,2],
										zorder: 0,
									}, {
										font: 'numbers_gold',
										size: 2,
										type: 'graphical_font_label',
										text: str(the_player.number_of_item(name)),
										align_h: right,
										align_v: bottom,
										xy: [28,20],
										zorder: 1,
									}]
								},
								style: 'normal',
								resolution: 'double',
								wh: [58, 58],
								on_click: def() null,
							}) ]
						 ",
		
		

		make_inventory_panel: "def(abilities, items) ->widget widget(me, {
			type: 'dialog',
			id: 'selection_dlg',
			//rect: [2*level_width/3, 0, level_width/3, 2*level_height/3],
			rect: [20, 20, 760, 560],
			background_alpha: 255,
			background_frame: 'empty_window',
			upscale_frame: true,
			cursor: [20, 20],
			children: [
			{
				font: 'door_label',
				size: 2,
				type: 'graphical_font_label',
				text: ~Abilities:~,
			},
			{
				type: 'grid',
				columns: 4,
				children: abilities
			},
			{
				font: 'door_label',
				size: 2,
				type: 'graphical_font_label',
				text: ~Items:~,
			},
			{
				type: 'grid',
				columns: 4,
				children: items
			},
			{
				type: 'grid',
				columns: 1,
				children: [ {
					// Exit button
					type: 'button',
					label: {
						font: 'default',
						size: 2,
						type: 'graphical_font_label',
						text: ~Exit~,
					},
					resolution: 'double',
					wh: [100, 60],
					on_click: def() [fire_event('return_to_game')]
				}]
			}
			
			],
		})",
		
		draw_interface: "def() ->commands set(me.widgets, [make_inventory_panel( ability_buttons(ability_list), item_buttons(item_list) ),
		])",
		
	},
	
	
	on_return_to_game: "resume_level()",
	
	on_create: "[	set(x, 0), set(y, 0),
					draw_interface(),
					]",
	
		
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 23, y: 197, w: 1, h: 1,
		duration: -1,
	},
}