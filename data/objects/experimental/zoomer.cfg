{
id: "zoomer",
zorder: "@include data/zorder.cfg:wooden_scaffolding_background",
is_strict: true,
activation_border: 200,
prototype: ["hittable"],
editor_info: {
	category: "AWESOME",
},
properties: {
	attack_damage: 1,

	speed_rounding_overflow: { type:"decimal", default: 0.0, persistent: false },
	actual_speed:  "floor(speed) + floor(speed_rounding_overflow + speed - floor(speed))",
	
	collect_the_fractional_portion_of_the_speed: "set(speed_rounding_overflow, lib.math.decimal_mod(speed_rounding_overflow + speed - floor(speed),1))",
	speed: "1.9",


	_moving_clockwise: { type:"bool", default: true },
	test_solidity: "def(int offset_x, int offset_y, int center_x, int center_y) -> int int(solid(level, center_x+offset_x,center_y+offset_y,1,1))",

	move_from_position: "def(int from_x, int from_y) -> {x:int,y:int}
								{	x:  sign(
											#sides# 
										#bottom#	if(_moving_clockwise, 1, 0) *  s(0,1) * _not(s(1,0)) +
										#bottom#	if(_moving_clockwise, 0, -1) * s(0,1) * _not(s(-1,0)) +
										#top#		if(_moving_clockwise, -1, 0) * s(0,-1) * _not(s(-1,0)) +
										#top#		if(_moving_clockwise, 0, 1) * s(0,-1) * _not(s(1,0)) +
									
										#upper right concave corner#	if(_moving_clockwise, 0, -1) * s(1,0) * s(1,-1) * s(0,-1) +
										#lower right concave corner#	if(_moving_clockwise, 0, -1) * s(1,0) * s(1,1) * s(0,1) +
										#lower left concave corner#		if(_moving_clockwise, 1, 0) * s(-1,0) * s(-1,1) * s(0,1) +
										#upper left concave corner#		if(_moving_clockwise, 1, 0) * s(-1,0) * s(-1,-1) * s(0,-1) +

										#upper right convex corner#		if(_moving_clockwise, 0, -1) * _not(s(-1,0)) * s(-1,1) * _not(s(0,1)) +
										#lower right convex corner#		if(_moving_clockwise, -1, 0) * _not(s(-1,0)) * s(-1,-1) * _not(s(0,-1)) +
										#lower left convex corner#		if(_moving_clockwise, 0, 1) * _not(s(1,0)) * s(1,-1) * _not(s(0,-1)) +
										#upper left convex corner#		if(_moving_clockwise, 1, 0) * _not(s(1,0)) * s(1,1) * _not(s(0,1))
										),
										
									y:  sign(
											#sides# 
										#left#		if(_moving_clockwise, 1, 0) * s(-1,0) * _not(s(0,1)) +
										#left#		if(_moving_clockwise, 0, -1) * s(-1,0) * _not(s(0,-1)) +
										#right#		if(_moving_clockwise, -1, 0) * s(1,0) * _not(s(0,-1)) +
										#right#		if(_moving_clockwise, 0, 1) * s(1,0) * _not(s(0,1)) +
									
										#upper right concave corner#	if(_moving_clockwise, 0, 1) * s(1,0) * s(1,-1) * s(0,-1) +
										#lower right concave corner#	if(_moving_clockwise, -1, 0) * s(1,0) * s(1,1) * s(0,1) +
										#lower left concave corner#		if(_moving_clockwise, 0, -1) * s(-1,0) * s(-1,1) * s(0,1) +
										#upper left concave corner#		if(_moving_clockwise, 1, 0) * s(-1,0) * s(-1,-1) * s(0,-1) +
								
										#upper right convex corner#		if(_moving_clockwise, 1, 0) * _not(s(-1,0)) * s(-1,1) * _not(s(0,1)) +
										#lower right convex corner#		if(_moving_clockwise, 0, -1) * _not(s(-1,0)) * s(-1,-1) * _not(s(0,-1)) +
										#lower left convex corner#		if(_moving_clockwise, -1, 0) * _not(s(1,0)) * s(1,-1) * _not(s(0,-1)) +
										#upper left convex corner#		if(_moving_clockwise, 0, 1) * _not(s(1,0)) * s(1,1) * _not(s(0,1))
										)
								} where s = def(int _x, int _y) test_solidity(_x,_y,from_x,from_y) where _not = def(foo) int(not foo)",



		//must place above flat ground
	set_initial_position: "[set(mid_x, new_pos.x),set(mid_y, new_pos.y-1)] where new_pos = find_floor(mid_x,mid_y,1000)", 
	
	iterate_from_position: "def(int start_x, int start_y, int steps_left) -> {x:int,y:int}  
														 if(steps_left > 0, iterate_from_position(start_x + new_position.x, start_y + new_position.y, steps_left-1), {x: start_x, y: start_y})
														 where new_position = move_from_position(start_x,start_y)",
	
	move_forward: "[set(mid_x, calc_position.x), set(mid_y, calc_position.y), collect_the_fractional_portion_of_the_speed] where calc_position = iterate_from_position(mid_x,mid_y, (actual_speed))",
	
},

on_create: "[set_initial_position]",
on_process: "[move_forward]",
on_end_anim: "animation('normal')",

animation: {
	id: "normal",
	image: "enemies/zoomer.png",
	rect: [1,1,29,29],
	frames: 2,
	pad: 3,
	duration: 2,
	attack_area: "all",
},
}