
#TODO: This platform is intended to be supported by two vertical ropes,
#one holding up each side. However the ropes have some measure of give,
#and when the player walks to one side of the platform it tilts in that
#direction and they'll eventually fall off it.
{
id: "tracked_platform",
platform_area: [0,15,160,16],
editor_info: {
	category: "platforms",
	var: [
		{
			name: "control_points",
			type: "points",
			value: "[]",
		},
		{
			name: "end_behavior",
			type: "enum",
			value: "'circuit'",
			enum_values: "circuit,reverse,stop,fall",
		},
		{
			name: "move_when_stood_on",
			type: "boolean",
			value: 0,
		},
		{
			name: "is_moving",
			type: "boolean",
			value: 0,
		},
	],
},
vars:	{
	position: 1,
},
properties: {
	node_behavior:	"def(index) switch(vars.end_behavior,
					'circuit', (index)%size(vars.control_points),
					'reverse', (abs((index)%(2*size) - size)) where size = (size(vars.control_points)-1),
					'stop', min(size(vars.control_points), (index)%size(vars.control_points)),
					'fall', min(size(vars.control_points), (index)%size(vars.control_points)),
					)",
	material_sound: "'metal'",
},


on_jumped_on: "if(level.player.standing_on = me, set(vars.is_moving,true))",

on_process: "[
	   if(vars.control_points and size(vars.control_points) >= 2 and is_moving,
		([ add(vars.position,1),
			if(vars.end_behavior = 'stop' and index >= (size(vars.control_points)-1), set(vars.is_moving,false)),
			if(vars.end_behavior = 'fall' and index >= (size(vars.control_points)-1), [set(vars.is_moving,false), set(accel_y,80)]),
			set(midpoint_x, (this_node[0]*this_portion + next_node[0]*next_portion)/100),
			set(midpoint_y, (this_node[1]*this_portion + next_node[1]*next_portion)/100)
	    ] where this_node = vars.control_points[node_behavior(index)],
		        next_node = vars.control_points[node_behavior(index+1)],
				this_portion = 100 - timing%100,
				next_portion = timing%100)
		            where index = switch(end_behavior,
		            		'circuit',	(timing/100)%size(vars.control_points),
		            		'reverse',  (timing/100)%(2*(size(vars.control_points)-1)),
		            		'stop',		min((timing/100),size(vars.control_points)),
		            		'fall',		min((timing/100),size(vars.control_points)))
		            
		) where timing = vars.position,]",
animation: {
	id: "normal",
	no_remove_alpha_borders: true,
	image: "experimental/crazy-platform.png",
	x: 0,
	y: 0,
	w: 160,
	h: 32,
	duration: 10000,
},
}
