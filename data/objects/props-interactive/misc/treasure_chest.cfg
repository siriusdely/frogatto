{
id: "treasure_chest",
zorder: "@include data/zorder.cfg:exterior_decor",
is_strict: true,
solid_dimensions: ["npc"],
collide_dimensions: ["key"],
editor_info: {
	category: "props",
},

properties: {
	locks: "filter(level.chars, 'char', char.type = 'padlock' and abs(lib.math.length(context.me, char)) < 100)",
	test_locks: "def(object possible_key) -> commands map(locks, 'lock', 
								if(lock.variations = possible_key.variations, 
									[fire_event(lock, 'unlock'), 
										if(frogatto.swallowed_object != null and frogatto.swallowed_object = possible_key, frogatto.empty_stomach, remove_object(possible_key))])) where frogatto = (obj frogatto_playable <- level.player)",

	treasure_already_taken: "bool :: (level.player.get_stored_event(event_name) = 1)",


#-------------------------- vars --------------------------#
	_loot: { type: "[obj item_acquirable]", init: "[]", persistent: false },
	event_name: { type: "string", default: "", editor_info: { type: "text" } },
	spawn_type: { type: "string", default: "coin_gold_big", editor_info: { type: "text", value: "'coin_gold_big'" } },
	spawn_properties: { type: "{string -> any}", default: {}, editor_info: { type: "text" } },
},

on_create: "if(treasure_already_taken, animation('open'),animation('normal'))",
on_interact: "[fire_event(frogatto, 'start_interact'),
		if(locks, if(frogatto.swallowed_object != null and frogatto.swallowed_object is obj padlock_key, test_locks(frogatto.swallowed_object)), [animation('opening'),sound('DoorOpen.ogg')])] where frogatto = (obj frogatto_playable <- level.player)",

on_end_normal_anim: "animation('normal')",
on_end_opening_anim: "[animation('open'),fire_event(level.player, 'end_interact'),fire_event('treasure_give')]",
on_end_open_anim: "animation('open')",
on_collide_object: "[test_locks(arg.collide_with)]",

###We must put this in a separate function, because loot only exists *after* the treasure_give event has fired.  If we called it above, it would have no target.
on_force_loot_acquire: "if(size(_loot) > 0,map(_loot, execute(value, value.do_acquisition)))",

on_treasure_give: "if((not treasure_already_taken), [ 	
		schedule(40, spawn(spawn_type,level.player.mid_x-20*level.player.facing,level.player.mid_y-60,{velocity_y:-30, accel_y:0, zorder:50, collide_dimensions_in:[]}, [add(_loot,  [(obj item_acquirable <- child)]), if(size(spawn_properties) > 0, map(spawn_properties, set(child[key], value))) ]) ),
		if(event_name, schedule(2,level.player.store_event(event_name,1))),

		schedule(41, fire_event('force_loot_acquire')),
	])",

animation: [
	{
		image: "props/interactive-props.png",
		id: "normal",
		rect: [0,0,63,48],
		duration: 200,
		interact_area: "all",
	},
	{
		image: "props/interactive-props.png",
		id: "opening",
		rect: [0,0,63,48],
		frames: 6,
		frames_per_row: 3,
		pad: 0,
		duration: 5,
	},
	{
		image: "props/interactive-props.png",
		id: "open",
		rect: [128,49,191,97],
		duration: 200,
	},
],
}