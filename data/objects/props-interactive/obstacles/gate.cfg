{
id: "gate",
zorder: "@include data/zorder.cfg:exterior_decor",
prototype: ["triggerable"],
has_feet: false,
always_active: true,
solid_dimensions: ["player","common","~thrown"],
collide_dimensions: ["key"],
adjust_feet_on_animation_change: false,
timer_frequency: 5,
is_strict: true,

editor_info: {
	category: "props",
},

properties: {
	locks: "[object] :: filter(level.chars, value.type = 'padlock' and lib.math.length(context.me, value) < 100)",
	
	test_locks: "def(object possible_key) -> commands
		map(locks, 'lock', 
			if(lock.variations = possible_key.variations, [
				fire_event(lock, 'unlock'), 
				if(frogatto.swallowed_object = possible_key,
					empty_belly,
					remove_object(possible_key) ),
			])
		) where empty_belly = [
			set(frogatto.variations, []), 
			set(frogatto.swallowed_object, null),
		] where frogatto = (obj frogatto_playable <- level.player)",
		
	//check the cycle to avoid contention with a lock that's about to kill itself
	is_locked: "bool :: bool(locks) and level.cycle > 0 or not level.player.get_stored_event(event)",
	
	portcullis: { type: "obj gate.portcullis", init: "object('gate.portcullis', img_mid_x, img_mid_y, {facing:facing, desired_y: y-120, desired_y2: y, origin_y: y, clip_area: [me.x,me.y+18,me.img_w,me.img_h]})" },
},



on_create: "[
	animation(if(is_locked, 'locked', 'unlocked')), 
	add_object(portcullis),
	set(portcullis.is_locked, is_locked),
	bind_command(def() portcullis.immediately_set_pos),
	spawn('gate.overlay',img_mid_x,img_mid_y,facing),
]",

#If we fail to change the animation like we desire, we revert to our previous animation, and then schedule another attempt to change the animation next cycle.
on_change_animation_failure: "[
	animation(arg.previous_animation), 
	schedule(1, animation(animation)),
]",

on_end_locked_anim: "if(is_locked, [
	animation('locked'),
], [
	animation('opening'), 
	fire_event( portcullis,'unlock'),
	sound('gate-open.ogg'),
]) asserting portcullis",

on_end_unlocked_anim: "if(is_locked,[
	animation('closing'),
	fire_event( portcullis,'lock'),
	schedule(10,sound('gate-close.ogg')),
],[
	animation('unlocked'),
]) asserting portcullis",

on_end_closing_anim: "animation('locked')",
on_end_opening_anim: "animation('unlocked')",

on_lock: "if(event, level.player.store_event(event,0)) 
	asserting event | 'You must set an event for this gate in the editor; the event is global in nature, and is used to remember which gates are open.'",
on_unlock: "if(event, level.player.store_event(event,1)) 
	asserting event | 'You must set an event for this gate in the editor; the event is global in nature, and is used to remember which gates are open.'",

on_button_pressed: "[fire_event('unlock')]",
on_button_released: "[fire_event('lock')]",

#-------------------------- key handling --------------------------#
on_collide_object: "[
	test_locks(arg.collide_with),
	if(locks,schedule(1,fire_event('check_locks')))
]",
on_check_locks: "if(not locks, fire_event('unlock'))",


animation: [
	{
		"@base": true,
		image: "props/gate.png",
		pad: 3,
		gate_area: [0,0,39,120,"solid"],
		palettes: "@include data/palettes.cfg:dungeon_palettes",
		frames: 1,
		rect: [2,2,39,120],
	},
	{
		id: "locked",
		solid_area: [8,20,21,85],
		duration: 30,
	},
	{
		id: "opening",
		solid_area: [8,20,21,40],
		duration: 28,
	},
	{
		id: "closing",
		solid_area: [8,20,21,40],
		duration: 24,
		play_backwards: true,
	},
	{
		id: "unlocked",
		solid_area: [8,20,21,30],
		duration: 30,
	},
],
object_type: [
	{
		id: "overlay",
		zorder: "@include data/zorder.cfg:wooden_scaffolding_foreground",
		has_feet: false,
		always_active: true,
		on_end_anim: "animation('normal')",
		animation: {
			image: "props/gate.png",
			pad: 3,
			id: "normal",
			rect: [43,2,80,104],
			frames: 1,
			duration: 1000,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
	},
	{
		id: "portcullis",
		zorder: "@include data/zorder.cfg:exterior_decor",
		zsub_order: 5,
		has_feet: false,
		always_active: true,
		adjust_feet_on_animation_change: false,
		timer_frequency: 5,
		
		properties: {
			set_at_open_pos: "def() -> commands [
				animation('normal'),
				set(gate_vel,2),
				set(y,origin_y-120),
			]",
			
			set_at_closed_pos: "def() -> commands [
				animation('normal'),
				set(gate_vel,2),
				set(y,origin_y),
			]",
			
			origin_y: { type: "int", default: 2 },
			desired_y: { type: "int", default: 9 },
			desired_y2: { type: "int", default: 67 },
			is_locked: { type: "bool", default: false },
			gate_vel: { type: "int", default: 2 },
			immediately_set_pos: "if(is_locked, set_at_closed_pos(),set_at_open_pos())",
		},
		
		on_lock: "[set(me.is_locked,true), animation('moving')]",
		on_unlock: "[set(me.is_locked,false), animation('moving')]",
		on_process_moving: "[
				if(is_locked,
					if(y < desired_y2,
						[set(y, y+(1+gate_vel)),set(gate_vel, gate_vel+1)],
						set_at_closed_pos()  ),
					if(y > desired_y,
						[set(y, y-(1+gate_vel)),set(gate_vel, gate_vel+1)],
						set_at_open_pos() ))]",
		on_end_normal_anim: "animation('normal')",
		
		animation: [
			{
				image: "props/gate.png",
				pad: 3,
				id: "normal",
				rect: [84,2,121,104],
				frames: 1,
				duration: 200,
				palettes: "@include data/palettes.cfg:dungeon_palettes",
			},
			{
				image: "props/gate.png",
				pad: 3,
				id: "moving",
				rect: [84,2,121,104],
				frames: 1,
				duration: 200,
				palettes: "@include data/palettes.cfg:dungeon_palettes",
			},
		],
	},
],
}
