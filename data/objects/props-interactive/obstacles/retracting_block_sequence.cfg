{
id: "retracting_block_sequence",
always_active: true,
is_strict: true,
properties: {
	add_block: "def (int xmove, int ymove) -> commands execute(me,
	             [if(me.skip_count > 0,
				     add(me.skip_count, -1),
				      [add_object(new_block), add(the_blocks, [new_block])] where new_block = object('retracting_block_sequence.block', _xpos + xmove, _ypos + ymove, facing)),
				  add(_xpos, xmove),
				  add(_ypos, ymove)
				 ])",
	remove_blocks: "def(int nblocks) -> commands execute(me, [map(range(nblocks), remove_object(me.the_blocks[value])), set(the_blocks, the_blocks[nblocks:]), add(_position, -nblocks)])",

	sequence: {type: "[int]", default: [20] },
	the_blocks: {type: "[obj retracting_block_sequence.block]", default: [], persistent: false },
	_xpos: {type: "int", default: 0, persistent: false },
	_ypos: {type: "int", default: 0, persistent: false },
	_position: {type: "int", default: 0, persistent: false },
	skip_count: {type: "int", default: 0, persistent: false },

	platform_length: {type: "int", default: 10, persistent: false },
	activated: {type: "bool", default: false, persistent: false },
},
on_first_cycle: "[set(alpha, 0), set(_xpos, midpoint_x), set(_ypos, midpoint_y),
	 fire_event('add_block'),
	 map(sequence, 'b', if(index%2,
	           if(b < 0, map(range(abs(b)), fire_event('add_block_up')),
					     map(range(abs(b)), fire_event('add_block_down'))),
	           if(b < 0, map(range(abs(b)), fire_event('add_block_left')),
					     map(range(abs(b)), fire_event('add_block_right'))))),
	 fire_event('reset'),
	]",
timer_frequency: 10,
on_cosmic_shift: "[add(_xpos, arg.xshift), add(_ypos, arg.yshift)]",
on_timer: "[if(activated and _position + platform_length < size(the_blocks) and _position >= 0,
	          [add(_position, 1),
			   set(the_blocks[_position].animation, 'retracting'),
			   set(the_blocks[_position+platform_length].animation, 'extending')])]",
on_reset: "[map(the_blocks, set(value.animation, if(index < platform_length, 'extended', 'retracted'))), set(_position, 0)]",

on_add_block: "add_block(0, 0)",
on_add_block_up: "add_block(0, -32)",
on_add_block_down: "add_block(0, 32)",
on_add_block_left: "add_block(-32, 0)",
on_add_block_right: "add_block(32, 0)",
animation: {
	id: "normal",
	image: "props/retracting-blocks.png",
	rect: [0,0,15,31],
	frames: 1,
	duration: 200,
},
object_type: {
	id: "block",
	has_feet: false,
	properties:
	{
		material_sound: "'stone'",
	},
	on_change_animation_failure: "[animation(arg.previous_animation)]",
	zorder: "@include data/zorder.cfg:interior_decor",
	platform_area: [0,15,15,16],
	on_first_cycle: "if(animation != 'extended', set(platform_area, []))",
	on_enter_retracted_anim: "set(platform_area, [])",
	on_enter_extending_anim: "[set(platform_area, null),sound('platform-retracting-stone-slide-out'+1d4+'.wav')]",
	on_enter_retracting_anim: "sound('platform-retracting-stone-slide-in'+1d4+'.wav')",
	on_end_retracting_anim: "animation('retracted')",
	on_end_extending_anim: "animation('extended')",
	animation: [
		{
			id: "retracted",
			image: "props/retracting-blocks.png",
			rect: [64,0,79,31],
			frames: 1,
			duration: 100000,
		},
		{
			id: "retracting",
			image: "props/retracting-blocks.png",
			rect: [0,0,15,31],
			frames: 4,
			duration: 5,
		},
		{
			id: "extending",
			image: "props/retracting-blocks.png",
			rect: [0,0,15,31],
			frames: 4,
			duration: 5,
			play_backwards: true,
		},
		{
			id: "extended",
			image: "props/retracting-blocks.png",
			rect: [0,0,15,31],
			frames: 1,
			duration: 100000,
		},
	],
},
}
