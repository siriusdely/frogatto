{
id: "retracting_block_wide_sequence",
always_active: true,
properties: {
	add_block: "def (xmove, ymove) execute(me,
	             [if(me.vars.skip_count > 0,
				     add(me.vars.skip_count, -1),
				      spawn('retracting_block_wide_sequence.block',
				        vars.xpos + xmove, vars.ypos + ymove, facing)),
				  add(vars.xpos, xmove),
				  add(vars.ypos, ymove)
				 ])",
	remove_blocks: "def(nblocks) execute(me, [map(range(nblocks), 'n', remove_object(me.vars.blocks[n])), set(vars.blocks, vars.blocks[nblocks:]), add(vars.position, -nblocks)])",
},
vars: {
	blocks: [],
	sequence: [20],
	xpos: 0,
	ypos: 0,
	platform_length: 6,
	position: 0,
	activated: 0,
	skip_count: 0,
},
on_first_cycle: "[set(alpha, 0), set(vars.xpos, midpoint_x), set(vars.ypos, midpoint_y),
	 fire_event('add_block'),
	 map(vars.sequence, 'b', if(index%2,
	           if(b < 0, map(range(abs(b)), fire_event('add_block_up')),
					     map(range(abs(b)), fire_event('add_block_down'))),
	           if(b < 0, map(range(abs(b)), fire_event('add_block_left')),
					     map(range(abs(b)), fire_event('add_block_right'))))),
	 fire_event('reset')

	]",
timer_frequency: 10,
on_cosmic_shift: "[add(vars.xpos, xshift), add(vars.ypos, yshift)]",
on_timer: "[if(vars.activated and vars.position + vars.platform_length < vars.blocks.size,
	          [add(vars.position, 1),
			   set(vars.blocks[vars.position].animation, 'retracting'),
			   set(vars.blocks[vars.position+vars.platform_length].animation, 'extending')])]",
on_reset: "[map(vars.blocks, 'b', set(b.animation, if(index < vars.platform_length, 'extended', 'retracted'))), set(vars.position, 0)]",
on_child_spawned: "add(vars.blocks, [child])",
on_add_block: "add_block(0, 0)",
on_add_block_up: "add_block(0, -32)",
on_add_block_down: "add_block(0, 32)",
on_add_block_left: "add_block(-64, 0)",
on_add_block_right: "add_block(64, 0)",
animation: {
	id: "normal",
	image: "props/retracting-blocks.png",
	rect: [0,32,31,63],
	frames: 1,
	duration: 200,
},
object_type: {
	id: "block",
	has_feet: false,
	on_change_animation_failure: "[animation(previous_animation)]",
	zorder: "@include data/zorder.cfg:interior_decor",
	platform_area: [0,15,31,16],
	on_first_cycle: "if(animation != 'extended', set(platform_area, []))",
	on_enter_retracted_anim: "set(platform_area, [])",
	on_enter_extending_anim: "[set(platform_area, null),sound('platform-retracting-stone-slide-out'+1d4+'.wav')]",
	on_enter_retracting_anim: "sound('platform-retracting-stone-slide-in'+1d4+'.wav')",
	on_end_retracting_anim: "animation('retracted')",
	on_end_extending_anim: "animation('extended')",
	animation: [
		{
			id: "retracted",
			image: "props/retracting-blocks.png",
			rect: [128,32,159,63],
			frames: 1,
			duration: 100000,
		},
		{
			id: "retracting",
			image: "props/retracting-blocks.png",
			rect: [0,32,31,63],
			frames: 4,
			duration: 5,
		},
		{
			id: "extending",
			image: "props/retracting-blocks.png",
			rect: [0,32,31,63],
			frames: 4,
			duration: 5,
			play_backwards: true,
		},
		{
			id: "extended",
			image: "props/retracting-blocks.png",
			rect: [0,32,31,63],
			frames: 1,
			duration: 100000,
		},
	],
},
}