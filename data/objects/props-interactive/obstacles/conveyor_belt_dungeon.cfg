{
id: "conveyor_belt_dungeon",
editor_info: {
	category: "platforms",
},
is_strict: true,
zorder: "@include data/zorder.cfg:interior_decor",
hidden_in_game: true,

properties: {
	_round: "lib.math.round",

	length: "lib.math.length(_x_bound,_y_bound,_x2_bound,_y2_bound)",
	wheel_radius: "27/2.0",
	actB: "max(abs(_x2_bound-_x_bound),abs(_y2_bound-_y_bound)*2)",
	material_sound: "'metal'",
	do_setup: "[
		map([_top,_bottom,_supports,_wheel_left,_wheel_right], add_object(value)),
	
		set(_supports.mid_x, _x_bound), set(_supports.mid_y, _y_bound),
		set(_bottom.mid_x, _x_bound), set(_bottom.mid_y, _y_bound),
		set(_top.mid_x, _x_bound), set(_top.mid_y, _y_bound),
		set(_wheel_left.mid_x, _x_bound), set(_wheel_left.mid_y, _y_bound),
		set(_wheel_right.mid_x, _x2_bound), set(_wheel_right.mid_y, _y2_bound),
	]",

#-------------------------- vars --------------------------#
	speed: { type: "decimal", editor_info: { type: "decimal", value: "2" } },

	_x_bound: { type: "int", editor_info: { type: "x", value: "x" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "x+200" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "y" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "y" } },
	
	_supports: { type: "obj conveyor_belt_dungeon.belt", init:"object('conveyor_belt_dungeon.belt',x,y, {facing:facing, zsub_order:-6, animation:'supports'})", persistent: false },
	_bottom: { type: "obj conveyor_belt_dungeon.belt", init:"object('conveyor_belt_dungeon.belt',x,y, {facing:facing, zsub_order:-5, animation:'bottom'})", persistent: false },
	_top: { type: "obj conveyor_belt_dungeon.belt", init:"object('conveyor_belt_dungeon.belt',x,y, {facing:facing, zsub_order:-5})", persistent: false },
	_wheel_left: { type: "obj conveyor_belt_dungeon.wheel", init:"object('conveyor_belt_dungeon.wheel',x,y, {facing:facing, zsub_order:-2})", persistent: false },
	_wheel_right: { type: "obj conveyor_belt_dungeon.wheel", init:"object('conveyor_belt_dungeon.wheel',x,y, {facing:facing, zsub_order:-2})", persistent: false },
},

on_create: "[do_setup, fire_event('calculate_segments'), set(activation_border,actB)]",

on_editor_changed_variable: "[
	if(_top, [map([_top,_bottom,_supports,_wheel_left,_wheel_right], remove_object(value)), fire_event('setup')]),
	fire_event('calculate_segments'),
	]",

on_calculate_segments: "[set(_top.custom_draw,
	//The list of points around, with concentration on the curves on each end.
	(items + map(items, 2 + value)
	  where items =
	    [v*curve_len/10.0 | v <- range(11)] +
	    [(1.0 - curve_len) + v*curve_len/10.0 | v <- range(11)]) +

	//the vertical offsets, creating a curve at each end.
	(vertical_offsets + reverse(vertical_offsets)
	 
	   where vertical_offsets =
	     map(range(11), [0,22 - sqrt(22.0^2 - ((value-22.0)^2))]) +
	     map(reverse(range(11)), [0,(_wheel_right.y - _wheel_left.y) + 22 - sqrt(22.0^2 - ((value-22.0)^2))]))),
	     set(_bottom.custom_draw,
		     [0,1,2,3, [0,0], [0,voffset], [0,voffset], [0,0]]
		     where voffset = _wheel_right.y - _wheel_left.y),
	     set(_supports.custom_draw,
		     [0,1,2,3, [0,0], [0,voffset], [0,voffset], [0,0]]
		     where voffset = _wheel_right.y - _wheel_left.y),

	set(platform_motion_x, _round(speed*67)),
	set(platform_offsets, [0,_y2_bound-_y_bound]),
	set(platform_area, [0,0,_round(abs(_x2_bound-_x_bound)/2 + 1.5*wheel_radius),1]),
	
	if(_bottom.set_ends, [ //Needed for the editor.
		_bottom.set_ends(_x_bound, _round(_y_bound+wheel_radius - 16), _x2_bound, _round(_y2_bound-wheel_radius*2.5)),
		_top.set_ends(_round(_x_bound - wheel_radius*2), _round(_y_bound-wheel_radius*2.5 - 24), _round(_x2_bound + wheel_radius*2), _round(_y2_bound-wheel_radius*2.5)),
		_supports.set_ends(_x_bound, _round(_y_bound+wheel_radius - 44),_x2_bound, _round(_y2_bound-wheel_radius*2.5)),
	])

	] where
		curve_len = wheel_radius*2.0/(wheel_radius*4.0 + (_x2_bound - _x_bound)),
		vertical_adj = 16.0,
		vertical_off = _wheel_right.y - _wheel_left.y",

on_process: "[
	set(xy,[_round(_x_bound-wheel_radius*1.5), _round(_y_bound-wheel_radius*2.5)]),
	
	_top.set_offset(-(cycle*speed)/4),
	fire_event(_top, 'update_draw_area'),
	
	_bottom.set_offset((cycle*speed)/4),
	fire_event(_bottom, 'update_draw_area'),

	fire_event(_supports, 'update_draw_area'),

	add(_wheel_left.rotate, speed),
	add(_wheel_right.rotate, speed),

	]",

platform_area: [0,0,200,1],
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 86,
	y: 73,
	w: 28,
	h: 28,
	palettes: "@include data/palettes.cfg:dungeon_palettes",
},
object_type: [
	{
		id: "wheel",
		animation: {
			id: "normal",
			image: "props/dungeon-conveyor-belt-wheel.png",
			x: 0,
			y: 0,
			w: 27,
			h: 27,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
	},
	{
		id: "belt",
		is_strict: true,
		properties: {
			length: "lib.math.length(_x_bound,_y_bound,_x2_bound,_y2_bound)",
			set_ends: "def(int new_x1, int new_y1, int new_x2, int new_y2) -> commands
				[set(_x_bound,new_x1),set(_y_bound,new_y1),set(_x2_bound,new_x2),set(_y2_bound,new_y2),fire_event(me,'create'),]",
			set_offset: "def(decimal pixels) -> commands execute(me, [set(draw_area, [0, pixels, img_w/2, length/2]), set(offset_counter, pixels%img_w)])",

			offset_counter: { type: "decimal", default: 0, persistent: false },
			_x_bound: { type: "int", default: 0, persistent: false },
			_x2_bound: { type: "int", default: 0, persistent: false },
			_y_bound: { type: "int", default: 0, persistent: false },
			_y2_bound: { type: "int", default: 0, persistent: false },
		},
		on_create: "[
			set(x, _x_bound),
			set(y, _y_bound),
			fire_event('update_draw_area'),
			set(activation_area, [min(_x_bound,_x2_bound) -200, min(_y_bound,_y2_bound) -200, abs(_x_bound-_x2_bound) +200, abs(_y_bound-_y2_bound) +200]),  #xywh#
			]",

		on_update_draw_area: "set(draw_area, [offset_counter, 0, (_x2_bound - _x_bound)/2, img_h/2])",
		
		animation: [
		{
			id: "normal",
			image: "props/dungeon-conveyor-belt-top.png",
			x: 0,
			y: 0,
			w: 16,
			h: 16,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
		{
			id: "bottom",
			image: "props/dungeon-conveyor-belt-bottom.png",
			x: 0,
			y: 0,
			w: 16,
			h: 16,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
		{
			rect: [0,0,31,15],

			id: "supports",
			image: "props/dungeon-conveyor-belt-supports.png",
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
		],

	},

],
}
