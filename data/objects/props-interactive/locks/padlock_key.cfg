{
id: "padlock_key",
prototype: ["throwable"],
solid_dimensions: ["thrown"],
collide_dimensions: ["key"],

friction: 1000,
zorder: -1,
properties: {
	swallowable: "bool :: true",
	get_hit_by: "def(obj hittable collide_with) -> commands null",
	material_sound: "'smallmetal'",
	
	color: { type: "string", default: "gold", editor_info: { type: "enum", enum_values: ["gold", "silver", "green", "red", "purple", "blue", "cyan"] } },
	event_name: { type: "string", default: "", editor_info: { type: "text" } },
	
	valid_levels: { type: "[string]", default: [] }
},
on_start_level: "[ if(level.player.get_stored_event(event_name) = 1, remove_object(me)),
					add(variations, [color]),animation('normal')]",
solid_area: [0,0,15,15],

on_collide_object_body: "if(arg.collide_with_area != null and arg.collide_with is obj hittable, if(arg.collide_with_area in ['attack'], get_hit_by(arg.collide_with)) where collide_with = (obj hittable <- arg.collide_with) )",
on_collide_side: "[set(velocity_x, -(velocity_x*70)/100), sound('collide-metal'+1d10+'.wav')]",
on_collide_head: "[set(velocity_y, -velocity_y), sound('collide-metal'+1d10+'.wav')]",
on_collide_feet: "[sound('collide-metal'+1d10+'.wav'),set(velocity_x, (velocity_x*50)/100), if(abs(velocity_x) < 50, set(velocity_x, 0)), set(velocity_y, if(abs(velocity_y) > 50, -velocity_y/2, 0))]",
no_compile_image: "props/keys.png",

on_end_anim: "animation('normal')",

editor_info: {
	category: "keys & triggers",
},
animation: [

	#gold is the default
	{
		image: "props/keys.png",
		accel_y: 80,
		body_area: "all",
		duration: 1,
		rect: [0,0,15,15],
		id: "normal",
	},
	{
		image: "props/keys.png",
		accel_y: 80,
		body_area: "all",
		duration: 1,
		rect: [0,0,15,15],
		id: "thrown",
	},
],
variations: {
	gold:	"null",
	silver:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [16,0,31,15]))]",
	green:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [32,0,47,15]))]",
	red:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [48,0,63,15]))]",
	purple:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [64,0,79,15]))]",
	blue:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [80,0,95,15]))]",
	cyan:	"[map(filter(doc.animation, value.rect = [0,0,15,15]), 'anim', set(anim.rect, [96,0,111,15]))]",
},
}
