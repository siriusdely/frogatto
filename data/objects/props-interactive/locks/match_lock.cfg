{
id: "match_lock",
is_strict: true,
zorder: -5,
always_active: true,

editor_info: {
	category: "Match Locks",
},
properties: {
	set_color_to: "def( {r: int, g: int, b: int} color ) -> commands [set(me.red, color.r), set(me.green, color.g), set(me.blue, color.b)]",
	make_color_from_sigil: "def(int sigil) -> {r: int, g: int, b: int}  {r: addend + (sigil*coeff*5)%128, g: addend + (sigil*coeff*7)%128, b: addend + (sigil*coeff*11)%128} where coeff = 10, where addend = 128",

#-------------------------- aesthetic functions for activating/deactivating --------------------------#
	gradually_become_opaque: "map(range(6), schedule(value, set(alpha, value*51)))", //(6-1)*51=255, full opacity.
	gradually_become_transparent: "map(range(t+1), schedule(value, set(alpha, (t-value)*51))) where t = 5",
	

	do_aesthetic_activate: "[sound('menu-activate.wav'), gradually_become_opaque]",
	do_aesthetic_deactivate: "[sound('menu-activate.wav'), gradually_become_transparent]",
	
		
	set_sigil_value: "def(int new_val) -> commands [
		set(sigil_type, new_val),
		add(variations, [str(new_val)]),
		bind_command(def() set(me.animation,'normal')),
		set_color_to(make_color_from_sigil(new_val))
	]",
#-------------------------- coordinator management --------------------------#
	_lock_coordinator_existing: "find(filter(level.chars, value is obj match_lock_coordinator), value.event = event)",
	_lock_new_coordinator: "[
		set(_lock_coordinator, the_coordinator),
		add_object(the_coordinator),
		] where the_coordinator = object('match_lock_coordinator', 10, 10, {monitoring: [me], event: event})",

#-------------------------- temp vars --------------------------#
	_lock_coordinator: { type: "obj match_lock_coordinator|null", dynamic_initialization: false, persistent: false },
	event: { type: "string", default:"'foo'", editor_info: { type: "string" } },
	sigil_type: { type: "int", default: 1, persistent: false }, 
},

on_start_level: "[spawn('${self.type}.backing', mid_x, mid_y, facing), set(alpha, 0)]",

on_create: "[if(event != '',
	if(coordinator, [coordinator.add(me),set(_lock_coordinator, coordinator)], _lock_new_coordinator)
		where coordinator = _lock_coordinator_existing
	),
	]",

on_collide_object_trigger: "if(_lock_coordinator != null and not _lock_coordinator.is_lock_active(me),
								[	if(arg.collide_with is obj player_controlled, [_lock_coordinator.activate(me), do_aesthetic_activate]),
							])",

on_check_if_still_active: "if(_lock_coordinator != null and not _lock_coordinator.is_lock_active(me) and alpha > 0, do_aesthetic_deactivate)",
on_end_normal_anim: "[fire_event('check_if_still_active'),animation('normal')]",


variations: {
	"0":	"null",
	"1":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 32),set(value.y, 0)] )",
	"2":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 64),set(value.y, 0)] )",
	"3":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 96),set(value.y, 0)] )",

	"4":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x,  0),set(value.y, 32)] )",
	"5":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 32),set(value.y, 32)] )",
	"6":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 64),set(value.y, 32)] )",
	"7":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 96),set(value.y, 32)] )",

	"8":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x,  0),set(value.y, 64)] )",
	"9":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 32),set(value.y, 64)] )",
	"10":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 64),set(value.y, 64)] )",
	"11":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 96),set(value.y, 64)] )",

	"12":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x,  0),set(value.y, 96)] )",
	"13":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 32),set(value.y, 96)] )",
	"14":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 64),set(value.y, 96)] )",
	"15":	"map(filter(doc.animation, value.id = 'normal' ), [set(value.x, 96),set(value.y, 96)] )",
},




animation: {
	id: "normal",
	image: "props/match-buttons.png",
	x: 0, y: 0, w: 32, h: 32,
	trigger_area: [0,0,31,31,"solid"],
	duration: 6,
},

object_type: {
	id: "backing",
	zorder: -6,
	animation: {
		id: "normal",
		image: "props/match-buttons.png",
		x: 96, y: 96, w: 32, h: 32,
	},
},
}