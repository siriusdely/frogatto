//This object is automatically spawned by "sound-sources" in-game; it doesn't need to manually be placed by people editing levels, nor does it need to be spawned by object-writers who are using sound-sources to give in-game objects a tracked sound.  This coordinates multiple instances of a single sound so that only one instance of them plays at a given time, passing control to a new one if one of them is going to be removed.

{
id: "match_lock_coordinator",
is_strict: true,
hidden_in_game: true,
always_active: true,

properties: {
	add: "def(obj match_lock lock) -> commands [
		add(self.monitoring, [lock]),
		set(lock._lock_coordinator, self),
		
		fire_event(me,'do_setup')
	]",
	remove: "def(obj match_lock lock) -> commands [
		set(self.monitoring, newMonitoring),
		set(lock._lock_coordinator, null),
	] where newMonitoring = filter(self.monitoring, value!=lock)",
	
	
	activate: "def(obj match_lock lock) -> commands [
		if(prospective_lock = null, set(prospective_lock, lock),
			[set(prospective_lock, null), //we're clearing this variable regardless - if it matches, its going in 'activated', if it doesn't, it's just getting removed
			if(prospective_lock.sigil_type = lock.sigil_type, [add(activated, [lock]), add(activated, [prospective_lock]), schedule(1, fire_event('test_set'))])]
		),
	]",

	is_lock_active: "def(obj match_lock lock) -> bool (lock = prospective_lock) or (lock in activated)",

	setup_list_of_locks: "commands :: [
		if( size(monitoring) = size(filter(level.chars, value is obj match_lock)),
		[
			map( monitoring , value.set_sigil_value( new_sigils[index] )) where new_sigils = shuffle(map(range(size(monitoring)), index/2)),
		]),
	]",
	

#-------------------------- vars --------------------------#
	prospective_lock: { type: "obj match_lock|null", default: null },  //when you unlock a pair, you start by activating one (which gets stored here), and then activating another.
	activated: { type: "[obj match_lock]", default: [] },
		
	event: { type: "string", dynamic_initialization: true },
	monitoring: { type: "[obj match_lock]", default: [] },
	
},

on_do_setup: "setup_list_of_locks",

on_test_set: "if(size(activated) = size(monitoring), level.player.store_event(event, 1))",


animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
}

