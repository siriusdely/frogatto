{
id: "platform_swaying_vertical",
is_strict: true,
prototype: ["triggerable"],
properties: {
	pulleyDiameter: 18,
	sagOffset: 15,
	topRopeW: "pulleyDiameter",
	polarity: "if(ypolarity,1,-1)",
	ypolarity: "if(_move_y1 > _move_y2,1,0)",

	#if the platform is flipped, some values need to run in the opposite direction - such as pulley rotation
	sway_x: "sin(progress*4)*5",
	point1: "[_move_x1, _move_y1]",
	point2: "[_move_x1, _move_y2]",
	setPos: "def([decimal] to) -> commands [
			set(knot.midpoint_x, to[0] + pulleyDiameter/2 + sway_x), 
			set(knot.midpoint_y, to[1] + pulleyDiameter/2),
			set(top_pulley.midpoint_x, if(ypolarity,point2,point1)[0] + pulleyDiameter/2),
			set(top_pulley.midpoint_y, if(ypolarity,point2,point1)[1]),
			set(top_pulley.rotate, polarity*(sin(progress)+1)/2*180*15),
			set(bottom_pulley.midpoint_x, to[0] + pulleyDiameter/2 + sway_x),
			set(bottom_pulley.midpoint_y, to[1]),
			set(bottom_pulley.rotate, polarity*(sin(progress)+1)/2*180*15),
			
			
			left_rope.set_ends_and_offset( if(ypolarity,point2,point1)[0], if(ypolarity,point2,point1)[1],to[0] + sway_x, to[1], 0),
			right_rope.set_ends_and_offset(to[0]+pulleyDiameter + sway_x, to[1],if(ypolarity,point2,point1)[0]+pulleyDiameter, if(ypolarity,point2,point1)[1], lib.math.length(if(ypolarity,point2,point1)[0], if(ypolarity,point2,point1)[1],to[0],to[1])/2),
			]",
	pos: "[knot.midpoint_x, knot.midpoint_y]",
	stop: "map(range(steps+1), 'step', schedule(step, set(stopped, 1-(steps-step)/decimal(steps)))) where steps = 100",

	#Might want to include an if statement to only do this if it'll decrease speed.
	go: "map(range(steps+1), 'step', schedule(step, set(stopped,   (steps-step)/decimal(steps)))) where steps = 100",
	actBsize: "abs(_move_y1-_move_y2)*2",
	actMargin: "100", //
	actArea: "[point1[0] - 50 - actMargin, min(point1[1],point2[1]) - actMargin, point2[0]-point1[0] + 100 + actMargin*2, abs(point2[1]-point1[1]) + rope_height + 150 + actMargin*2]",
	
	list_tween: "def( [decimal] list_one, [decimal] list_two, decimal percent_raw) -> [decimal]
		map(range(size(list_one)), 'index', list_one[index]*(percent) + list_two[index]*(1.0-percent)) where percent = lib.math.constrain(0, percent_raw, 1)",

#-------------------------- triggerable overrides --------------------------#
	trigger_on: "commands :: go",
	trigger_off: "commands :: stop",
	initial_speed: "if(event = '', stopped, 1.0 - decimal(level.player.get_stored_event(event)))",

#-------------------------- vars --------------------------#
	actual_speed: { type: "decimal", default: 0 },

	top_speed: { type: "decimal", editor_info: { type: "int", value: "10", min_value: 0, max_value: 25 } },
	rope_height: { type: "decimal", editor_info: { type: "int", value: "128", min_value: 0, max_value: 256 } },
	_move_x1: { type: "int", editor_info: { type: "x", value: "x" } },
	_move_y1: { type: "int", editor_info: { type: "y", value: "y" } },
	_move_y2: { type: "int", editor_info: { type: "y", value: "y + 200" } },
	stopped: { type: "decimal", editor_info: { type: "decimal", value: "1.0", min_value: 0.0, max_value: 1.0 } },
	progress: { type: "decimal", editor_info: { type: "int", value: "0" }, default: 0 },
	is_zipline: { type: "bool", editor_info: { type: "boolean", value: "false" } },

	knot:	{ type: "obj platform_swaying_vertical.knot", init: "object('platform_swaying_vertical.knot',x,y)" },
	the_platform:	{ type: "obj platform_swaying_vertical.simple_platform_controller", init: "object('platform_swaying_vertical.simple_platform_controller',x,y, {parent: me, _parent: me})" },
	top_pulley:	{ type: "obj platform_swaying_vertical.pulley", init: "object('platform_swaying_vertical.pulley',x,y)" },
	bottom_pulley:	{ type: "obj platform_swaying_vertical.pulley", init: "object('platform_swaying_vertical.pulley',x,y)" },
	left_rope:		{ type: "obj rope_angled_controller", init: "object('rope_angled_controller',x,y)" },
	right_rope:		{ type: "obj rope_angled_controller", init: "object('rope_angled_controller',x,y)" },
#-------------------------- temporary vars --------------------------#
	_last_progress: { type: "decimal", default: 0, persistent: false },
	
	cache: { type: "object|null", default: null, persistent: false },
},

hidden_in_game: true,
on_start_level: "set(activation_area, actArea)",
on_editor_changed_variable: "[
	fire_event('done_create'),
	]",

on_load: "set(cache, create_cache())",
on_check_state: "set(stopped, initial_speed)",

on_create: "[schedule(2,fire_event('check_state')),
		set(activation_area, actArea),
		spawn('sound_source_individual',_move_x1, _move_y1,{sound_file:'ambient/squeakygearsturning.ogg'}),

		[add_object(knot), set(knot.activation_area, actArea)],
		[add_object(the_platform), set(the_platform.activation_area, actArea)],
		[add_object(top_pulley), set(top_pulley.activation_area, actArea)],
		[add_object(bottom_pulley), set(bottom_pulley.activation_area, actArea)],
		[add_object(left_rope), set(left_rope.activation_area, actArea)],
		[add_object(right_rope), set(right_rope.activation_area, actArea)],

		if(is_zipline, [set(progress, 95), set(stopped, 1.0)]),
		]",
		

on_done_create: "set(actual_speed, top_speed*50/lib.math.length(point1, point2))",
on_process: "[
	add(progress, actual_speed*(1-(stopped))),
	if(_last_progress = null or progress != _last_progress or cycle = 1,
	if(cache != null, query_cache(
		cache, 
		int(progress)%360, 
		setPos(newPos) where newPos = zip(list_tween(point1, point2, (sin(progress)+1)/2), [0, 0], a+b))))
	]",

on_button_pressed: "go",
on_button_released: "stop",
editor_info: {
	category: "platforms",
	help: "A moving platform rigged from ropes.",
},
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
object_type: [
	{
		id: "knot",
		zorder: "@include data/zorder.cfg:wooden_scaffolding_foreground",
		animation: {
			id: "normal",
			image: "props/rope-platform.png",
			rect: [81,1,93,13],
			frames: 1,
			duration: 1000,
			palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
		},
	},
	{
		id: "pulley",
		zorder: "@include data/zorder.cfg:wooden_scaffolding_foreground",
		animation: {
			id: "normal",
			image: "props/rope-platform.png",
			rect: [65,1,77,13],
			frames: 1,
			duration: 1000,
			palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
		},
	},
	{
		id: "simple_platform_controller",
		zorder: "@include data/zorder.cfg:wooden_scaffolding_foreground",
		properties: {
			tilt: 0,
			basketWobble: "sin(cycle*8)*bwmag*0.55",
			_parentSpeed: "(1.0 - int(lib.standardize.decimal(_parent.stopped)))",
			sway_x: "-_parent.sway_x",

			setPos: "[
				vert_rope.set_ends(_parent.knot.midpoint_x, _parent.knot.midpoint_y, _parent.knot.midpoint_x + sway_x, _parent.knot.midpoint_y + _parent.rope_height),
				[
				set(basket.midpoint_x, basketMidX),
					set(basket.midpoint_y, basketMidY),
					//We can set either position or velocity, but we can't set both because it makes Frogatto glitch when he stands on the platform.
					set(basket.rotate, _parent.polarity * _parentSpeed*(-inertia/6.0 + basketWobble)),
				] where basketMidX = _parent.knot.midpoint_x+sway_x
				where basketMidY = _parent.knot.midpoint_y + _parent.rope_height,
			]",
			decayBasketWobble: "set(bwmag, max(6.0,decimal(bwmag)*(0.99/1)))",
			setInertia: "schedule(2,set(inertia, 50*(sin(_parent.progress + 90 *_parent.polarity))))",

			player_is_standing_on_us: "bool :: (level.player.standing_on = basket)",
			not_in_zipline_bottomOut: "bool :: (mod(_parent.progress-90,360) < 150 or mod(_parent.progress-90,360) > 210)",
			not_in_zipline_topOut: "bool :: (mod(_parent.progress-90,360) > 50 and mod(_parent.progress-90,360) < 300)",
			testZipline: "if(_parent.is_zipline,
				[if(player_is_standing_on_us, if(not_in_zipline_bottomOut, [if(mod(_parent.progress-90,360) > 180, set(_parent.progress,_parent.progress - 2*mod(_parent.progress-90,180) )),
				if(_parent.stopped = 1.0, [_parent.go ])], if(_parent.stopped = 0.0,_parent.stop))),
			
				if((not player_is_standing_on_us), if(not_in_zipline_topOut, if(_parent.stopped = 1.0, _parent.go), if(_parent.stopped = 0.0, _parent.stop)) )])",
		#-------------------------- vars --------------------------#
			_parent: { type: "obj platform_swaying_vertical", dynamic_initialization: true },
			bwmag: { type: "decimal", default: 0 },
			basket: { type: "obj platform_swaying_vertical.shakebasket", init: "object('platform_swaying_vertical.shakebasket',x,y,{source:me})" },
			inertia: { type: "decimal", default: 0 },
			vert_rope: { type: "obj rope_angled_controller", init: "object('rope_angled_controller')" },
		
		},
		on_create: "[	
					set(alpha,0),
					set(x,_parent.knot.x),
					set(y,_parent.knot.y),
					set(bwmag,8.0),
					
					add_object(vert_rope),
					add_object(basket),
					
			]",
		on_process: "[setPos,setInertia,decayBasketWobble,testZipline]",
		animation: {
			id: "normal",
			image: "effects/particles.png",
			x: 210,
			y: 166,
			w: 28,
			h: 28,
			frames: 1,
			duration: 1000,
		},
	},
	{
		id: "shakebasket",
		zorder: "@include data/zorder.cfg:exterior_decor",
		platform_area: [22,86,52,87],
		on_jumped_on: "if(level.player.standing_on = me, [add(source.bwmag, 10),fire_event(source._parent,'tripped')])",
		next_animation: "'normal'",
		properties: {
			pwidth: 40,
		
			#Properties for the positions of the platform.
			platform_y_pos: "midpoint_y + 72",
			platform_x1_pos: "midpoint_x - pwidth",
			platform_x2_pos: "midpoint_x + pwidth",
			material_sound: "'wood'",

			#The platform area when the platform is at rest.
			base_rect: "[x1pos, ypos,
			             x2pos, ypos,
			             x2pos, ypos,
			             x1pos, ypos]
						   where x1pos = platform_x1_pos,
						         x2pos = platform_x2_pos,
								 ypos = platform_y_pos",

			#Rotation of the platform to account for the platform rotating.
			rotated_rect: "rotate_rect(midpoint_x, midpoint_y, lib.math.round(rotate), base_rect)",
		
			source: { type: "obj platform_swaying_vertical.simple_platform_controller", dynamic_initialization: true },
		},
		on_process: "[
					set(platform_area, [(rotated_rect[0] - x)/2, (rotated_rect[1] - y)/2, (rotated_rect[2] - x)/2]),
					set(platform_offsets, [0, (rotated_rect[3] - rotated_rect[1])]),
				]",
		animation: [
			{
				palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
				no_remove_alpha_borders: true,
				id: "normal",
				image: "wip/basket-mockup2.png",
				rect: [75,0,146,99],
				frames: 11,
				reverse: true,
				duration: 4,
			},
			{
				palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
				no_remove_alpha_borders: true,
				id: "normal",
				image: "wip/basket-mockup2.png",
				rect: [219,0,290,99],
				frames: 7,
				reverse: true,
				duration: 4,
			},
		],
	},
],
}
