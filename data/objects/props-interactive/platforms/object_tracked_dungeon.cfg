{
id: "object_tracked_dungeon",
editor_info: {
	category: "platforms",
},
is_strict: true,
hidden_in_game: true,
prototype: ["triggerable"],

properties: {

#-------------------------- core behavior --------------------------#
	node_behavior:	"def(decimal index) -> int switch(_end_behavior,
					'circuit', (index)%size(_control_points),
					'reverse', (abs((index)%(2*size) - size)) where size = (size(_control_points)-1),
					'stop', min(size(_control_points), (index)%size(_control_points)),
					'fall', min(size(_control_points), (index)%size(_control_points)),
					)",

	setup:		"[map(_control_points, spawn_track_plate(value)), draw_track(_control_points), set(activation_border,actb_size),if(_end_behavior = 'reverse',set(_position,10000*(size(_control_points)-1))),
	
		switch(_moving_object_type,
				'platform', spawn('object_tracked_dungeon.platform',x,y,{activation_border: actb_size, _parent:me}, [set(_moving_object,child),me.move_to_start(child)]),
				'circular_saw', spawn('object_tracked_dungeon.circular_saw',x,y,{activation_border: actb_size, _parent:me}, [set(_moving_object,child),me.move_to_start(child)]),
				)]		
		",
	
	move_to_start: "def(custom_obj obj) -> commands execute(me,if(size(_control_points) > 0, [set(obj.midpoint_x, _control_points[0][0]), set(obj.midpoint_y, _control_points[0][1])]))",
	
	spawn_track_plate:	"def([decimal,decimal] coords) -> commands [spawn(self.type + '.track_plate', coords[0], coords[1], 1),
							spawn(self.type + '.track_bolt', coords[0], coords[1], 1)]",
	
	
	draw_track: "def([[decimal,decimal]] track_points) -> commands	[if(size(track_points) > 1,
			#Draw track segments between each point in our path#
			map(range(size(track_points)-1), 'index', [
				[obj.set_ends(	track_points[index][0],
								track_points[index][1],
								track_points[index+1][0],
								track_points[index+1][1]),
				set(obj.animation, 'track'),
				set(obj.zorder, int(lib.json.get_document_map('data/zorder.cfg')['interior_back_wall_decor'])),
				add_object(obj)] where obj = object('rope_angled_controller')  ])),
				
				#ONLY if we're a circuit, we add a special final piece of track that closes the loop between the first and last ones#
				if(size(track_points) > 2 and _end_behavior = 'circuit',
					[obj.set_ends(	track_points[0][0],
								track_points[0][1],
								track_points[size(track_points)-1][0],
								track_points[size(track_points)-1][1]),
				set(obj.animation, 'track'),
				set(obj.zorder, int(lib.json.get_document_map('data/zorder.cfg')['interior_back_wall_decor'])),
				add_object(obj)] where obj = object('rope_angled_controller')
					
					)
				]",

	actb_size: "200 + max(abs(sort(map(_control_points, value[0]),a < b)[0] - sort(map(_control_points, value[0]),a < b)[arlength]), abs(sort(map(_control_points, value[1]),a < b)[0] - sort(map(_control_points, value[1]),a < b)[arlength]))  where arlength = size(_control_points) - 1",

	speed: "_move_speed",

#-------------------------- triggerable overrides --------------------------#
	trigger_on: "commands :: set(_is_moving, true)",
	trigger_off: "commands :: set(_is_moving, false)",

	is_active: "if(event = '', _is_moving, bool(level.player.get_stored_event(event)))",

#-------------------------- vars --------------------------#
	_control_points: { type: "[[decimal,decimal]]", default: [], editor_info: { type: "points" } },
	_end_behavior: { type: "string", default: "circuit", editor_info: { type: "enum", enum_values: ["circuit", "reverse", "stop", "fall"] } },
	_move_when_stood_on: { type: "bool", editor_info: { type: "bool", value: false } },
	_is_moving: { type: "bool", editor_info: { type: "bool", value: true } },
	_move_speed: { type: "decimal", editor_info: { type: "decimal", value: "1.0" } },
	_maintain_speed_near_points: { type: "bool", default: false, editor_info: { type: "y", value: false } },
	_waits_at: { type: "string", default: "nothing", editor_info: { type: "enum", enum_values: ["nothing", "top", "bottom", "both"] } },
	_moving_object_type: { type: "string", default: "platform", editor_info: { type: "enum", enum_values: ["platform", "circular_saw"] } },

	_moving_object: { type: "custom_obj|null", default: null, dynamic_initialization: true },
	_last_node: { type: "[decimal]", default: [0,0], persistent: false },
	_position: { type: "decimal", default: 1.0, persistent: false },


},
on_start_level: "[
	setup,
	if(size(_control_points), set(_last_node, _control_points[0]))]",


on_process: "if(_moving_object != null, [
	   if(_control_points and size(_control_points) >= 2 and is_active,
		([	add(_position, 
				decimal(400/lib.math.length(this_node, next_node) //fudge multiplier. Large number, faster platforms.
				* if(not _maintain_speed_near_points,
					lib.math.constrain(base_speed, cos(this_portion/100.0*2-100)*100+base_speed, base_speed+100) where base_speed = speed*20, //This makes the platform slow down if we're near a point.
					100))),
			if(_end_behavior = 'stop' and index >= (size(_control_points)-1), set(_is_moving,false)),
			if(_end_behavior = 'fall' and index >= (size(_control_points)-1), [set(_is_moving,false), sound('metal-platform-fall'+1d5+'.wav'), set(_moving_object.accel_y,80)]),
			set(_moving_object.midpoint_x, (this_node[0]*this_portion + next_node[0]*next_portion)/10000),
			set(_moving_object.midpoint_y, (this_node[1]*this_portion + next_node[1]*next_portion)/10000),
			set(_last_node, this_node),
			if(_last_node != this_node,
				switch(_waits_at,
				'top', if(this_node[1] < _last_node[1] and this_node[1] < next_node[1], set(_is_moving, false)),
				'bottom', if(this_node[1] > _last_node[1] and this_node[1] > next_node[1], set(_is_moving, false)),
				'both', if((this_node[1] > _last_node[1] and this_node[1] > next_node[1]) or (this_node[1] < _last_node[1] and this_node[1] < next_node[1]), set(_is_moving, false)),
				)),
	    ] where this_node = _control_points[node_behavior(index)],
		        next_node = _control_points[node_behavior(index+1)],
				this_portion = 10000 - timing%10000,
				next_portion = timing%10000)
		            where index = decimal(switch(_end_behavior,
		            		'circuit',	(timing/10000)%size(_control_points),
		            		'reverse',  (timing/10000)%(2*(size(_control_points)-1)),
		            		'stop',		min((timing/10000),size(_control_points)),
		            		'fall',		min((timing/10000),size(_control_points))))
		            
		) where timing = _position*speed,])",
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210,
	y: 166,
	w: 28,
	h: 28,
	duration: -1,
},







object_type: [
	{
		### TODO:  no way to do this without a circular reference;  we want all the logic in the parent because it's the same for all moving object types, but only this can detect being jumped on
		on_jumped_on: "if(_parent._move_when_stood_on = true and level.player.standing_on = me, set(_parent._is_moving,true))",

		id: "platform",
		platform_area: [0,4,48,5],
		zorder: "@include data/zorder.cfg:exterior_decor",
		properties: {
			_parent: { type: "obj object_tracked_dungeon", dynamic_initialization: true },
			material_sound: "'metal'",
		},
		animation: {
			id: "normal",
			no_remove_alpha_borders: true,
			image: "props/platform-tracked-dungeon.png",
			x: 0,
			y: 0,
			w: 48,
			h: 32,
			duration: 10000,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
			
		},
		on_create: 		"spawn('sound_source_individual',mid_x,mid_y,{parent:me, sound_file:'ambient/Metal-squeak.ogg'})",
		
},
	{
		prototype: ["hittable"],
		id: "circular_saw",
		properties: {
			team: "'neutral'",
			attack_damage: 400,
			attack_damage_to_player: "if(higher_difficulty, 6, 2)",
			_parent: { type: "obj object_tracked_dungeon", dynamic_initialization: true },
		},
		on_process: "[add(rotate,amount),blur(250,75,2)] where amount = 30*sin(cycle*2)",
		zorder: "@include data/zorder.cfg:player",
		animation: {
			id: "normal",
			no_remove_alpha_borders: true,
			image: "props/circular-saw.png",
			attack_area: [4,4,38,38],
			x: 0,
			y: 0,
			w: 42,
			h: 42,
			duration: 10000,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
	},

	{
		id: "track_plate",
		zorder: "@include data/zorder.cfg:interior_back_wall_decor",
		zsub_order: -5,
		animation: {
			id: "normal",
			image: "props/elevator-track-mount.png",
			x: 0,
			y: 0,
			w: 16,
			h: 16,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
	},
	{
		id: "track_bolt",
		zorder: "@include data/zorder.cfg:interior_back_wall_decor",
		zsub_order: 0,
		animation: {
			id: "normal",
			image: "props/elevator-track-mount.png",
			x: 16,
			y: 0,
			w: 16,
			h: 16,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},
	},
],

}
