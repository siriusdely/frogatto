{
id: "object_swinging_dungeon",
hidden_in_game: true,
is_strict: true,

editor_info: {
	category: "platforms",
	help: "A chain with an object attached to the end of it.
		  Set the position by dragging the x/y values.
		  x controls how wide the swing is. (warning: keep it to the right of the midline)
		  y controls how long the chain is.",
},
properties:	{
	_length: { type: "decimal", editor_info: { type: "y", value: "y + 200" } },
	_arc: { type: "decimal", editor_info: { type: "x", value: "x + 100" } },
	_speed: { type: "decimal", default: 1000, editor_info: { type: "decimal", value: "1000" } },
	_moving_object_type: { type: "string", default: "spiked_ball", editor_info: { type: "enum", enum_values: ["platform", "spiked_ball"] } },

	_chain: { type: "obj rope_angled_controller", init: "object('rope_angled_controller', self.x, self.y, {animation: 'chain', zorder: zorder-1})" },
	_moving_object: { type: "custom_obj", dynamic_initialization: true },

	weight_rotates: "switch(_moving_object_type,
						'platform', false,
						'spiked_ball', true)",
	orbit_length: "lib.math.length(_length, _arc, mid_y, mid_x)",
	act_b:	"orbit_length * 2.5",
},

on_create: "[
		set(activation_border, act_b),
		set(_chain.activation_border, act_b),
		add_object(_chain),

		spawn(type+'.mount',mid_x,mid_y,facing),
		spawn(type+'.'+_moving_object_type,x,y,0,
			[set(_moving_object, child),
			set(child.x_schedule, map(targets, value[0]-child.img_w/2)),
			set(child.y_schedule, map(targets, value[1]-child.img_h/2)),
			set(child.schedule_speed, 2),
			set(child.activation_border, act_b)]),
			

		] where targets = map( map(range(360/_speed), value*_speed),
			orbit(	midpoint_x,
					midpoint_y,
					sin(decimal(value))*angle+90,
					orbit_length))
		#where arc_size = zip(
			orbit(	mid_x, mid_y, angle, orbit_length),	orbit(	mid_x, mid_y, 90, orbit_length), a - b)#
			
		where _speed = _speed/orbit_length
		where angle = 90-lib.math.angle(self, {'mid_y' -> _length, 'mid_x' -> _arc})",
		
on_process: "[ if(lib.math.angle(_moving_object,self) = -90,sound('whoosh-deep'+1d6+'.wav')),
			_chain.set_ends(self.midpoint_x+5, #Off-center otherwise for some reason.#
							self.midpoint_y, 
							_moving_object.x+_moving_object.img_w/2, 
							_moving_object.y+_moving_object.img_h/2),
			if(weight_rotates, set(_moving_object.rotate, lib.math.angle(_moving_object, self)+90)),
		]",
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 210,
	y: 166,
	w: 28,
	h: 28,
	duration: -1,
},
object_type: [
{
	platform_area: [0,10,15,11],
	id: "mount",
	properties: {
		material_sound: "'metal'",
	},
	animation: {
		id: "normal",
		image: "props/spiked-ball.png",
		rect: [0,0,15,31],
		duration: -1,
		palettes: "@include data/palettes.cfg:dungeon_palettes",
	},
},
{
	id: "spiked_ball",
	prototype: ["hittable"],
		properties: {
			team: "'neutral'",
			attack_damage: 400,
			attack_damage_to_player: "if(higher_difficulty, 6, 2)",
		},
	animation: {
		id: "normal",
		image: "props/spiked-ball.png",
		rect: [22,6,62,46],
		duration: -1,
		attack_area: "all",
		palettes: "@include data/palettes.cfg:dungeon_palettes",
	},
},
{
	id: "platform",
	properties: {
		_weight: { type: "obj object_swinging_dungeon.platform_weight", init: "object('object_swinging_dungeon.platform_weight', mid_x, mid_y - 8, {facing: facing, parent: me, relative_x: 0, relative_y: -8})" },
		material_sound: "'metal'",
	},

	on_create: "add_object(_weight)",
	on_die: "remove_object(_weight)",
	platform_area: [0,11,47,12],
	animation: {
		id: "normal",
		image: "props/spiked-ball.png",
		rect: [0,48,47,79],
		duration: -1,
		palettes: "@include data/palettes.cfg:dungeon_palettes",
	},
},
{
	id: "platform_weight",
	zorder: "@include data/zorder.cfg:exterior_near_background",
	animation: {
		id: "normal",
		image: "props/spiked-ball.png",
		rect: [48,48,79,79],
		duration: -1,
		palettes: "@include data/palettes.cfg:dungeon_palettes",
	},
},
],
}