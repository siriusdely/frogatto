{
id: "retracting_spike_machine",
zorder: 51,
is_strict: true,
on_create: "[
				spawn('retracting_spike_machine.spike', mid_x, mid_y + 10, { zorder: zorder-1, _controller: me, upside_down: upside_down },  [set_group(group)]),
				spawn(self.type + '.backdrop',mid_x,mid_y,facing,set(child.zorder,-5))
	        ]",
properties: {
#-------------------------- vars --------------------------#
	delay_ticks:		{ type: "int", default: 0, editor_info: { type: "int", value: "0" } },
	retracted_ticks:	{ type: "int", default: 80, editor_info: { type: "int", value: "80" } },
	stab_ticks:			{ type: "int", default: 4, editor_info: { type: "int", value: "4" } },
	extended_ticks:		{ type: "int", default: 50, editor_info: { type: "int", value: "50" } },
	retract_ticks:		{ type: "int", default: 40, editor_info: { type: "int", value: "40" } },
},

editor_info: {
	category: "enemies, milgramen",
},
animation: {
	id: "normal",
	image: "props/retracting-spike-machine.png",
	rect: [0,0,15,47],
	duration: -1,
	palettes: "@include data/palettes.cfg:dungeon_palettes",
},


object_type: [
	{
		id: "backdrop",
		animation: {
			id: "normal",
			image: "props/retracting-spike-machine.png",
			rect: [16,0,31,47],
			duration: -1,
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},	
	},
	{
		id: "spike",
		prototype: ["hittable"],
		properties: {
			team: "'neutral'",
			damage_type: "'stab'",
			attack_damage_to_player: "if(y = _y_retracted, 0, if(higher_difficulty, 4, 1))",
			attack_damage: "if(y = _y_retracted, 0, kill_anything)",
			
			_controller: { type: "obj retracting_spike_machine", dynamic_initialization: true },
			_y_extended: { type: "int", default: 0, persistent: false },
			_y_retracted: { type: "int", default: 0, persistent: false },
			_command_schedule: { type: "commands", default: [], persistent: false },
		},
		on_load: "[set(velocity_y, 0), set(_y_extended, y + 60*up), set(_y_retracted, y), fire_event('done_load')]",
		
		#we create a 'schedule' for the spike. The spike goes through several states:
		# (1) retracted, starting at 0: the spike remains retracted and does nothing, the default state
		# (2) stabbing, starting at vars.retracted_ticks: the spike begins extending, and will fully extend within vars.stab_ticks
		#               cycles. The spike starts doing damage during this stage.
		# (3) extended, starting after vars.stab_ticks: the spike is extended, and remains still.
		# (4) retracting, starting after vars.extended_ticks: the spike is retracting, and will fully retract within vars.retract_ticks.
		#
		# we record this entire schedule within the _command_schedule variable. Then we can just execute this command to
		# conveniently set up a full cycle worth of movement for the object.
		on_done_load: "[
		set(_command_schedule,	[schedule(_controller.retracted_ticks, [ set(velocity_y, (100*(_y_extended - _y_retracted))/_controller.stab_ticks),sound('spiketrap-extend'+1d6+'.wav',0.6)]),
							   schedule(_controller.retracted_ticks + _controller.stab_ticks, [set(y, _y_extended), set(velocity_y, 0)]),
							   schedule(_controller.retracted_ticks + _controller.stab_ticks + _controller.extended_ticks, [set(velocity_y, (100*(_y_retracted - _y_extended))/_controller.retract_ticks)]),
							   schedule(_controller.retracted_ticks + _controller.stab_ticks + _controller.extended_ticks + _controller.retract_ticks,
													   [set(y, _y_retracted), set(velocity_y, 0), fire_event('start_cycle'),sound('spiketrap-retract.wav',0.4)])
			]),
			schedule(_controller.delay_ticks, fire_event('start_cycle'))
		]",
		on_start_cycle: "_command_schedule",
		animation: {
			id: "normal",
			image: "props/retracting-spike-machine.png",
			rect: [48,0,63,31],
			duration: -1,
			attack_area: "all",
			palettes: "@include data/palettes.cfg:dungeon_palettes",
		},	
	}],
}