{
id: "kitty_sniper_background",
prototype: ["stationary_vulnerable"],
solid_area: [16,10,36,33],
is_strict: true,
always_active: true,

properties: {
	"@derive": "@include data/object_prototypes/enemies/kitty.cfg:properties",
	find_duration: 20, //Must be greater than aim_lag! Frames, 25 = 1/2 second.
	aim_lag: 15, //Min. 10 frames or so. Sequence: Finding → locked on. Finding has the crosshairs all over the map, but it tweens into the predicted position. From here, we either lock on and commit to the shot, or keep trying predicted positions from aim_lag frames ago.
	lock_on_duration: 10,
	reload_delay: 10,
	max_range: 1500,
	min_range: 250,
	cant_see_behind: ["nbr", ],
	sample_frames_from_history: 10,
	
	aim_at: "def(PointLike target)->commands [
		if(0 < frame and frame < frames/2, set(facing, -1)), //Don't flip for straight up/down, to add in a little continuity/personality/lazyness.
		if(frames/2 < frame and frame < frames, set(facing, 1)),
		set(time_in_animation, int(lib.math.interpolate([0,8,0], frame/1.0/frames))), //We've got separate animations for straight up and down, so we animate up to and back down from the apex.
	] where frame = m.loop(m.round(m.angle(me, target)/(360/16.0)-frames/4), frames)
	  where m = lib.math
	  where frames = 16",
	  
	short: "bool <- min_range > lib.math.length(me, closest_player)",
	in_range: "bool <- lib.math.is_sorted([min_range, lib.math.length(me, closest_player), max_range]) 
		and (not closest_player.underwater)
		and (not filter(tiles_at(closest_player.midpoint_x, closest_player.midpoint_y), 
			value.id in cant_see_behind))
		and (not filter(level.active_chars, 
			value.zorder < 0 and lib.math.rect_intersect(
				lib.standardize.rect_to_xy(value), 
				[int,int,int,int]<-closest_player.mid_xy*2)))",
	far: "bool <- lib.math.length(me, closest_player) > max_range",
	
	//lib.math.rect_intersect([1056, 128, 1172, 244],[1119, 201, 1119, 201])
	
	crosshairs: { //Zylot lent me one of his from the Crosshair Dimension. Thanks, Zylot! :D
		type: "obj kitty_sniper_background.target",
		init: "object('kitty_sniper_background.target')",
	},
	
	player_history: {type: "[[int]]", default: []}, //[x,y,vel_x,vel_y,cycle] - cache. If a prediction from n frames ago grants a reasonably accurate picture of now, then continue using that prediction to shoot Frogatto!
	
	pump_player_history: "def()->commands set(player_history, ([new_player_history] + player_history)[:aim_lag])",
	new_player_history: "[int] <- closest_player.mid_xy+closest_player.velocity_xy+[level.cycle]",
	
	prediction: "[int, int] <- predict_from(
		map(fold(player_history[size(player_history)-samples:], zip([int]<-a,[int]<-b)), (int<-value)/samples)
	) asserting size(player_history) >= samples 
	where samples = sample_frames_from_history",
	
	predict_from: "def([int] hist) -> [int, int] [
		hist[0]+(hist[2]*(cycle-hist[4]))/100,
		hist[1]+(hist[3]*(cycle-hist[4]))/100
	]",
	
	closest_player: "obj player_controlled_platformer_character <- 
		sort(level.players, lib.math.length(me, a) < lib.math.length(me, b))[0]",
	
	snipe_sequence_starting_cycle: {type: "int", default: 0},
	snipe_sequence_cycle: "int <- cycle-snipe_sequence_starting_cycle",
},

editor_info: {
	"@derive": "@include data/object_prototypes/enemies/kitty.cfg:editor_info",
},

/* State Machine of a Sniper:
scan ← target out of range, far (or hidden?)
scan → find (pump player_history) → seek (pump player_history) → lock_on & shoot → reload → find…
defend ← target out of range, near
Notes: Scan can go to defend. While it is unlikely that we'll skip over find, it is not impossible – for example, if the player enters via a near door.
*/

on_create: "[
	set(animation, 'snipe'),
	fire_event('scan'),
]",

on_scan: "[
	aim_at(closest_player),
	
	schedule(1, 
		if(in_range, 
			fire_event('start_snipe'),
			fire_event(if(short, 'defend', 'scan')),
		),
	),
]",

on_start_snipe: "[
	add_object(crosshairs),
	set(snipe_sequence_starting_cycle, cycle),
	set(player_history, [new_player_history]*aim_lag), //Prefill the aim history with very accurate data. Cover up this accuracy with some noise as we scope in.
	fire_event('find'),
]",

on_find: "[
	aim_at(closest_player),
	pump_player_history(),
	
	(//TODO: Add find effect here. Possibly a random jitter applied to nearest_player.mid_xy fading to the predicted aim. Use cycle-snipe_sequence_starting_cycle to grab time.
	set(crosshairs.mid_xy, map(zip(prediction, rough_target), int(value)) )
	where rough_target = lib.math.rotate(
			lib.math.angle(me, closest_player),
	      	[	sin(offset_factor)*12.5*(1/percent_done)*signs[0], 
	      		sin(offset_factor*2)*25*(1/percent_done)*signs[1]]),
	where offset_factor = decimal <- lib.math.interpolate( //Gives us the innitial 'jitteryness' as the sniper does the gross adjustments, then homes in on the predicted location of Frogatto.
	      	[360, 0], //Must end in 0 to be at our target, or 0,0 offset, because of sin use.
	      	percent_done ),
	      signs = [[1,1],[1,-1],[-1,1],[-1,-1]][snipe_sequence_starting_cycle%4]
	where percent_done = snipe_sequence_cycle/1.0/find_duration ),
	
	schedule(1, 
		if(in_range, 
			fire_event(if(snipe_sequence_cycle>find_duration, 'seek', 'find')),
			[fire_event(if(short, 'defend', 'scan')), remove_object(crosshairs)],
		),
	),
]",

on_seek: "[
	aim_at(closest_player),
	
	set(crosshairs.mid_xy, prediction),
	
	schedule(1, (
		if(offset_match and velocity_match, [
			fire_event('start_lock'),
		],[
			pump_player_history(), //Don't pump again if we're going to fire based on this history.
			if(in_range, 
				fire_event('seek'),
				[fire_event(if(short, 'defend', 'scan')), remove_object(crosshairs)] 
			)
		]
		) where offset_match = fold( //Calc difference between predicted and real position and velocity. If it's good, – bam! 
		         	zip(level.player.mid_xy, prediction, abs(a-b) < threshold_offset), a and b), 
		         velocity_match = fold([
		         	level.player.velocity_x-(int<-back(player_history)[2]) < threshold_velocity, 
		         	level.player.velocity_y-(int<-back(player_history)[3]) < threshold_velocity], a and b)
		where threshold_offset = 10,
		      threshold_velocity = 20 
	))
]",

on_start_lock: "[
	set(snipe_sequence_starting_cycle, cycle),
	fire_event('lock'),
]",

on_lock: "[
	aim_at(closest_player), //TODO: We should aim where we're aiming, not merely at the closest player.
	//Don't pump_player_history(), we've stopped predicting and started shooting.
	
	set(crosshairs.mid_xy, prediction),
	set(crosshairs.rotate, int(lib.math.interpolate(
		[0,90,90], //[0, -45, 0, 45, 90, 135, 90], 
		snipe_sequence_cycle/1.0/lock_on_duration ))),
	
	schedule(1, fire_event(
		if(snipe_sequence_cycle < lock_on_duration, 'lock', 'fire')
	)), //No interrupting.
]",

on_fire: "[
	remove_object(crosshairs),
	//TODO: closest_player might have changed between then and now. Record the right one earlier.
	//TODO: Figure out a better damage intersection formula for this, probably making a line between the sniper and the target.
	if(lib.math.length(closest_player, crosshairs) < 15 and not closest_player.underwater, [
		closest_player.handle_damage_sourceless('lacerate', 1),
		screen_flash([255,0,0,128], 2),
	],[
		screen_flash([255,255,255,128], 2),
	]), 
	schedule(1, fire_event('start_wait')), //No reload delay?
]",

on_start_wait: "[
	set(snipe_sequence_starting_cycle, cycle),
	fire_event('wait'),
]",

on_wait: "[
	//TODO: Take care of the animaiton, here, when we've figured out what we want to do with it.
	schedule(1, fire_event(
		if(snipe_sequence_cycle < reload_delay, 'wait', 'scan')
	)), //No interrupting now.
]",

on_defend: "[
	//TODO: Add defend animation.
	schedule(1, 
		if(in_range, 
			fire_event('start_snipe'),
			fire_event(if(short, 'defend', 'scan')),
		),
	),
]",

animation: [
	{
		id: "attract", //Look sniper-y for the editor. The default pose, facing straight-down, is hard to recognise out of context.
		image: "enemies/kitty-sniper.png",
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		rotate_on_slope: true,
		body_area: [23,14,23,25],
		no_remove_alpha_borders: true,
		rect: [285,1,"@eval 285+68",69],
		frames: 1,
		duration: 99999999,
	},{
		id: "snipe", //One frame for each of the drawn 180° rotations.
		image: "enemies/kitty-sniper.png",
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		rotate_on_slope: true,
		body_area: [23,14,23,25],
		no_remove_alpha_borders: true,
		rect: [1,1,68,71],
		frames: 9,
		duration: 1, //3.3 weeks
	},
],

object_type: [{
	id: "smoke_trail",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	animation: {
		id: "disperse",
		image: "enemies/kitty-sniper-bullet.png",
		rect: [1,0,10,9],
		frames: 4,
		pad: 3,
		duration: 4,
	},
},{
	id: "target",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	on_create: "blur(128, 128, 1)",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 23,
		y: 197,
		w: 28,
		h: 28,
	},
}],
	
}