{
id: "kitty_sniper_foreground",
prototype: ["stationary_vulnerable"],
solid_area: [21,16,45,38],
is_strict: true,
has_feet: true,

editor_force_standing: true,
editor_info: {
	"@derive": "@include data/object_prototypes/enemies/kitty.cfg:editor_info",
	help: "Processor-heavy object! A sniper kitty who tries to shoot Frogatto. Somewhat experimental...",
},

properties: {
	//Point the kitty, visually, in the right direction.
	aim_at: "def(PointLike target)->commands [
		if(0 < frame and frame < frames/2, set(facing, -1)), //Don't flip for straight up/down, to add in a little continuity/personality/lazyness.
		if(frames/2 < frame and frame < frames, set(facing, 1)),
		set(time_in_animation, int(lib.math.interpolate([0,8,0], frame/1.0/frames))), //We've got separate animations for straight up and down, so we animate up to and back down from the apex.
	] where frame = m.loop(m.round(m.angle(me, target)/(360/16.0)-frames/4), frames)
	  where m = lib.math
	  where frames = 16",
	  
	range: "{
		min: 50,
		max: 600, //in level coordinates
	}",
	  
	gunsight_distance_from_source: 20,
	gunsight_source: "Point <- zip(me.midpoint_xy, [0,14])", //TODO: Factor in distance to rifle barrel here?
	target: " 
		//obj hittable <- sort(level.players, lib.math.length(me, a) < lib.math.length(me, b))[0] //Slightly more expensive than level.player, called a lot; could be cached and just refreshed every frame.
		level.player",
	granularity: 4,
	steps_to_fire: "steps_to_target", //"decimal <- max(abs(gunsight_source[0]-fire_overshoot_target[0]), abs(gunsight_source[1]-fire_overshoot_target[1])))/granularity", //This is, if we were to miss Frogatto.
	fire_overshoot_target: "Point <- lib.standardize.toPoint(target)", //"Point <- orbit(target.mid_x, target.mid_y, lib.math.angle(me, target), lib.math.length(me, target)+(int <- max(level.camera_position[2:]))/2/2)", //Half resolution, half width of screen. Used to add a buffer, so the laser sight continues past Frogatto and off screen.
	steps_to_target: "int <- max(abs(gunsight_source[0]-target.mid_x), abs(gunsight_source[1]-target.mid_y))/granularity", //Steps to frogatto.
	
	//Return a list of points on the line of sight between the sniper kitty and frogatto.
	line_of_sight: "[Point] <- map(range(steps_to_fire+1), 'step', [
		//lib.math.interpolate(gs, step/1.0/steps_to_fire, fot))
		(fot[0]*(percent) + gs[0]*(1.0-percent)),
		(fot[1]*(percent) + gs[1]*(1.0-percent))
	] where percent = step/1.0/steps_to_fire)
	where fot = fire_overshoot_target,
	      gs = gunsight_source",
		
	//Used to find 1) how many samples from the point of origin the collision is and 2) what we're actually colliding with.
	steps_to_collision: "def([Point] steps, int iteration=0) -> {step: int, obj: null | obj hittable} //This doesn't work, returning merely a bunch of strings - a list of valid functions?
		base iteration = size(steps): 
			{step: iteration-1, obj: null} //No collisions.
		base solid(level, int(steps[iteration][0]), int(steps[iteration][1])): 
			{step: iteration, obj: null} //Level collision.
		base find(filter(level.active_chars, value is obj hittable and value not in [me, me.target]), 'char', 
				char.solid_rect.x < steps[iteration][0] and steps[iteration][0] < char.solid_rect.x2 and
				char.solid_rect.y < steps[iteration][1] and steps[iteration][1] < char.solid_rect.y2) :
			{step: iteration, obj:
			find(filter(level.active_chars, value is obj hittable and value not in [me, me.target]), 'char', 
				char.solid_rect.x < steps[iteration][0] and steps[iteration][0] < char.solid_rect.x2 and
				char.solid_rect.y < steps[iteration][1] and steps[iteration][1] < char.solid_rect.y2) }
		recursive: steps_to_collision(steps, iteration+1)",
	/* //Old function, but non-recursive. I had difficulty retrofitting it to return the hit object.
	steps_to_collision: "def([Point] steps, int iteration=0) -> int
		if(i >= 0, i, size(steps)-1) where i = 
		index(steps, find(steps, 'step',
			solid(level, int(step[0]), int(step[1]))
			or find(
				filter(level.active_chars, value is obj hittable and value not in [me, me.target]),
				lib.math.in_range(value.solid_rect.x, step[0], value.solid_rect.x2) and
				lib.math.in_range(value.solid_rect.y, step[1], value.solid_rect.y2))
		))",	
	*/
		
	sniper_ray: { //Constant; a reference to the object for drawing the ray.
		type: "obj rope_angled_controller", 
		init: "object('rope_angled_controller', me.x, me.y, {animation: 'tongue'})",
	},
	
	target_sighted_duration: {type: "int", default: 0},
	target_sighted_duration_needed: "1*50", //1s @ 50fps
	
	show_points: "def() -> commands map(line_of_sight, spawn('target', value[0], value[1], {scale: 0.5}))",
},

on_create: "[
	animation('snipe'), 
	set(time_in_animation_delta, 0),
	add_object(sniper_ray), 
	set(sniper_ray.zorder, me.zorder-1),
	//show_points(),
]",

on_die: "remove_object(sniper_ray)",

on_process: "if(lib.math.length(me, target) < range.max, [
	me.aim_at(target),
	sniper_ray.set_ends(gunsight_source[0], gunsight_source[1], cs[0], cs[1]) where cs = los[collision.step],
	set(sniper_ray.alpha, if(can_see_target, int(lib.math.interpolate([200, 200, 200, 255], target_sighted_duration/1.0/target_sighted_duration_needed)), 127)),
	if(not can_see_target, [
		set(target_sighted_duration, 0),
	],[
		add(target_sighted_duration, 1),
		if(target_sighted_duration = target_sighted_duration_needed, [
			if(collision.obj, collision.obj.get_hit_sourceless('lacerate', 200), target.get_hit_sourceless('lacerate', 2)),
			set(target_sighted_duration, 0),
		]),
	]),
]	where can_see_target = collision.obj or collision.step >= steps_to_target
	where collision = steps_to_collision(los)
	where los = line_of_sight, 
[
	set(sniper_ray.alpha, 0),
	set(target_sighted_duration, 0),
])",

animation: [
	{
		id: "attract", //Look sniper-y for the editor. The default pose, facing straight-down, is hard to recognise out of context.
		image: "enemies/kitty-sniper.png",
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		rotate_on_slope: true,
		body_area: [23,14,23,25],
		no_remove_alpha_borders: true,
		rect: [285,1,"@eval 285+68",69],
		frames: 1,
		duration: 99999999, //3.3 weeks
	},{
		id: "snipe", //One frame for each of the drawn 180Â° rotations.
		image: "enemies/kitty-sniper.png",
		accel_x: 0,
		accel_y: 80,
		pad: 3,
		rotate_on_slope: true,
		body_area: [23,14,23,25],
		no_remove_alpha_borders: true,
		rect: [1,1,68,71],
		frames: 9,
		duration: 1,
	},
],

object_type: [{
	id: "smoke_trail",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	animation: {
		id: "disperse",
		image: "enemies/kitty-sniper-bullet.png",
		rect: [1,0,10,9],
		frames: 4,
		pad: 3,
		duration: 4,
	},
},{
	id: "target",
	is_strict: true,
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	
	on_create: "blur(128, 128, 1)",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x: 23,
		y: 197,
		w: 28,
		h: 28,
	},
}],
	
}