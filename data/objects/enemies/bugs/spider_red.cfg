{
id: "spider_red",
always_active: false,
is_strict: true,
prototype: ["hittable"],
hitpoints: 200,

solid_dimensions: [],
traction_in_air: 1000,
friction: 3000,
timer_frequency: 15,
properties: {
	team: "'evil'",
	damage_type: "'bite'",
	attack_damage: "3",
	hurt_velocity_y: "0",
	taxonomy: "'bug'",
	death_fx_type: "'large'",
	acquirable_item_drop_value: "20",					
	points_value: "10",
	expand_activation_border: "set(me.activation_border,  max(me.activation_border,lib.math.length(_low[0],_low[1],_anchor[0],_anchor[1])))",
	solid_point: "def([decimal,decimal] vector) -> [decimal,decimal] # search exponentially for ground#
			if((solid(level, lib.math.round(pointToCheck[0]), lib.math.round(pointToCheck[1])) where pointToCheck = zip(vector, [me.mid_x, me.mid_y], a+b))
			or size(filter(vector, 'vec', abs(vec) > 1000)) > 0, 
				vector, 
				solid_point(map(vector, value*1.1))
			)",
	shoot_fire: "[		spawn('spider_red.fireball',midpoint_x,y+img_h,facing, set(child.velocity_y, 500)),
						spawn('spider_red.fireball',midpoint_x,y+img_h,facing, [set(child.velocity_x, 200), set(child.velocity_y, 440)]),
						spawn('spider_red.fireball',midpoint_x,y+img_h,facing, [set(child.velocity_x, -200), set(child.velocity_y, 440)])
					]",
	do_attack: "[[
			animation('drop'),
			expand_activation_border,
			schedule(stepsDown,animation('dangle2')),
			schedule(stepsDown + pause,animation('retract2')),
			schedule(stepsDown + 0*pause/3, fire_event('shoot') ),
			schedule(stepsDown + 1*pause/3, fire_event('shoot') ),
			schedule(stepsDown + 2*pause/3, fire_event('shoot') ),
			map(range(stepsDown), 'step',
				schedule(step, set(me.y, me.y + (sin(step*(90.0/stepsDown))*me._low[1]/2)*1))
				),

			map(range(stepsUp), 'step',
				schedule(step + stepsDown + pause, set(me.y, me.y + (me._low[1] - (sin(step*(90.0/stepsUp))*me._low[1]))/2 ))
				),
			
			map(range(0, newTime-20), 'step',
				schedule(step, set(x, x + ((sin((percent)*360.0*1.13))*20.0)) where percent = decimal(decimal(step)/decimal(stepsDown+pause)))
				),
			map(range(newTime), 'step',
				schedule(step, fire_event('set_silk'))
				),
			schedule(newTime, [set(x, x), set(y, y), fire_event('recover'), _silk.set_ends(me.mid_x+spinneret.x, me.mid_y+spinneret.y, me.mid_x+me._anchor[0], me.mid_y+me._anchor[1])])
			] where newTime = stepsUp + stepsDown + pause
			] where stepsDown = 20
			where stepsUp = 80
			where pause = 120",
			
	turn: "[facing(-facing),set(me.animation, 'turn'),set(me.velocity_x,0)]",
	
	process_dangle: "[set(rotate, sin(cycle*7) * 12.0),set(animation, 'dangle'+animation_suffix), set(time_in_animation, time_in_animation), if(cycle % 5 = 0, sound_falloff('spider-chatter'+1d6+'.wav'))]",
	process_retract: "[set(rotate, sin(cycle*7) * 4.0),set(animation, 'retract'+animation_suffix), set(time_in_animation, time_in_animation), if(cycle % 10 = 0, sound_falloff('spider-reel'+1d5+'.wav'))]",
	animation_suffix: "lib.math.round(sin(cycle*12)*1.0+1.0)+1",  //smoothly oscillate between 1 -> 3

	tryambush: "if(level.player.mid_x > mid_x - 20 and level.player.mid_x < mid_x + 20 and cycle%5 = 0,
		fire_event('drop'))",

	spinneret: "{x: 0, y: -32}",

#-------------------------- vars --------------------------#
	_low: { type: "[decimal, decimal]", init: "[0,0]", persistent: false },
	_anchor: { type: "[decimal, decimal]", init: "[0,-32]", persistent: false },
	_position: { type: "[decimal, decimal]", init: "[0,0]", persistent: false },
	
	_knot: {type: "obj spider_black.anchor", init: "object('spider_black.anchor', mid_x, mid_y, facing)" },
	_silk: {type: "obj spider_black.silk", init: "object('spider_black.silk', mid_x, mid_y, facing)" },
},


on_set_silk: "_silk.set_ends(me.mid_x+spinneret.x, me.mid_y+spinneret.y, me._position[0]+me._anchor[0], me._position[1]+me._anchor[1])",
on_shoot: "shoot_fire",
on_create: "[
		]",
on_drop: "[sound_falloff('spider-pounce'+1d9+'.wav'),
			[
				set(_anchor, new_anchor),
				set(_position, [self.mid_x, self.mid_y]),
				
				add_object(_knot), set(_knot.mid_x, mid_x+new_anchor[0]-2*facing), set(_knot.mid_y, mid_y+new_anchor[1]+2),
				add_object(_silk), set(_silk.mid_x, x), set(_silk.mid_y, y),
				set(_silk.x_1, mid_x+spinneret.x), set(_silk.y_1, mid_y+spinneret.y), set(_silk.x_2, mid_x+new_anchor[0]), set(_silk.y_2,mid_y+new_anchor[1]),
				
			] where new_anchor = solid_point([0,-8]),
			set(_low, zip(map(solid_point([0,16]), value/1.2), [0, 20], a-b)),
			fire_event('attack')
		]",

on_attack: "do_attack",
on_recover: "[animation('recover'),remove_object(_silk),remove_object(_knot)]",
on_end_recover_anim: "animation('stand')",
on_process_stand: "[tryambush, set(velocity_x, velocity_x*0.3)]",
on_process_walk: "[tryambush, if((not solid(level, midpoint_x + 75*facing, midpoint_y -60, 20, 60)) or solid(level, midpoint_x + 50*facing, midpoint_y -20, 20, 20), turn)]",

on_process_dangle1: "process_dangle",
on_process_dangle2: "process_dangle",
on_process_dangle3: "process_dangle",
on_process_retract1: "process_retract",
on_process_retract2: "process_retract",
on_process_retract3: "process_retract",

on_end_turn_anim: "animation('stand')",
on_end_walk_anim: "if(1d4=4,animation('stand'),animation('walk'))",
on_end_stand_anim: "[if(1d2=2,animation('stand'),animation('walk')),set(rotate,0)]",
on_end_dangle1_anim: "animation('dangle1')",
on_end_dangle2_anim: "animation('dangle2')",
on_end_dangle3_anim: "animation('dangle3')",
on_end_retract1_anim: "animation('retract1')",
on_end_retract2_anim: "animation('retract2')",
on_end_retract3_anim: "animation('retract3')",
on_end_drop_anim: "animation('drop')",
			
on_die: "[remove_object(_silk),remove_object(_knot), set(_silk.hitpoints, 0), set(_knot.hitpoints, 0)]",

on_footstep:"sound_falloff('spider-footstep'+1d6+'.wav')",

editor_info: {
	category: "enemies, forest",
	help: "An enemy that walks back and forth across flat sections of ceiling, and will opportunistically dive to bite the player, on a retracting line of silk.",
},
animation: [
	{
		"@base": true,
		feet_x: 28,
		feet_y: 46,
		image: "enemies/spider-hanging-red.png",
		pad: 3,
		body_area: "all",
		attack_area: [18,30,40,46],
		accel_x:0,
	},
	{
		id: "stand",
		rect: [287,2,343,57],
		frames: 1,
		duration: 5,
	},
	{
		id: "walk",
		rect: [347,2,403,57],
		frames: 8,
		frames_per_row:2,
		events:"0:6:12:18:footstep",
		accel_x: 25,
		duplicates: 8,
		duration: 3,
	},
	{
		id: "walk",
		rect: [347,2,403,57],
		frames: 8,
		frames_per_row:2,
		events:"0:10:20:30:footstep",
		accel_x: 5,
		duration: 5,
	},
	{
		id: "turn",
		rect: [2,245,58,300],
		frames: 10,
		frames_per_row:5,
		duration: 4,
	},
	{
		id: "recover",
		rect: [2,186,58,241],
		frames: 5,
		duration: 6,
	},
	{
		id: "drop",
		rect: [47,120,103,175],
		frames: 1,
		duration: 3,
	},
	{
		id: "dangle1",
		rect: [318,241,374,296],
		frames: 3,
		frames_per_row: 1,
		reverse: true,
		duration: 3,
	},
	{
		id: "dangle2",
		rect: [378,241,434,296],
		frames: 3,
		frames_per_row: 1,
		reverse: true,
		duration: 3,
	},
	{
		id: "dangle3",
		rect: [438,241,494,296],
		frames: 3,
		frames_per_row: 1,
		reverse: true,
		duration: 3,
	},
	{
		id: "retract1",
		rect: [107,2,163,57],
		frames: 3,
		frames_per_row: 1,
		reverse: true,
		duration: 3,
	},
	{
		id: "retract2",
		rect: [167,2,223,57],
		frames: 3,
		frames_per_row: 1,
		reverse: true,
		duration: 3,
	},
	{
		id: "retract3",
		rect: [227,2,283,57],
		frames: 3,
		frames_per_row: 1,
		reverse: true,
		duration: 3,
	},
],
object_type: [
	{
		id: "silk",
		ignore_collide: true,
		is_strict: true,
		properties: {
			length: "lib.math.length(x_1,y_1,x_2,y_2)",
			set_ends: "def(decimal new_x1, decimal new_y1, decimal new_x2, decimal new_y2) -> commands [set(x_1,new_x1), set(y_1,new_y1), set(x_2,new_x2), set(y_2,new_y2), fire_event(me,'reset')]",

			x_1: { type: "decimal", default: 0, persistent: false },
			x_2: { type: "decimal", default: 0, persistent: false },
			y_1: { type: "decimal", default: 0, persistent: false },
			y_2: { type: "decimal", default: 0, persistent: false },

		},
		on_create: "[
			fire_event(me,'reset'),
		]",
		on_reset: "[
			set(x, (x_2+x_1)/2 -2*facing),
			set(y, (y_2+y_1)/2 - (length/2)),
			set(draw_area, [0, 0, 8, length/2]),
			set(rotate,(angle(x_1,y_1,x_2,y_2)-90) ),
			]",
		on_die: "map(range(count), spawn('die_cloud_small', x_1 + value * ((x_2-x_1)/count), y_1 + value * ((y_2-y_1)/count), facing)) where count = lib.math.length(x_1, y_1, x_2, y_2)/25",
		editor_info: {
			category: "controllers",
			help: "A controller for angled ropes.",
		},
		animation: {
			image: "enemies/spider-thread.png",
			id: "normal",
			x: 0,
			w: 8,
			y: 0,
			h: 8,
		},
	},
	{
		id: "fireball",
		on_end_anim: "animation('normal')",
		prototype: ["shot"],
		zorder: "@include data/zorder.cfg:near_player_foreground_effects",
		zsub_order: 500,
		on_process:  "if(cycle%7 = 1, spawn('explosion_spark', mid_x, mid_y, facing))",
		animation: {
			id: "normal",
			image: "enemies/spider-hanging-red.png",
			rect: [78,12,91,25],
			frames: 1,
			duration: 10,
			attack_area: "all",
		},
	},
	{
		id: "anchor",
		next_animation: "'normal'",
		always_active: false,
		on_end_anim: "animation('normal')",
		on_die: "spawn('die_cloud_small', x, y, facing)",
		animation: {
			id: "normal",
			image: "enemies/spider-hanging-black.png",
			x: 80,
			y: 1,
			w: 4,
			h: 4,
			frames: 1,
		},
	},
],
}
