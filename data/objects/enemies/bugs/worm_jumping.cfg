{
id: "worm_jumping",
hitpoints: 400,
is_strict: true,
zorder: "@include data/zorder.cfg:player",
prototype: ["hittable"],
object_level_collisions: true,
properties: {
	team: "'evil'",
	attack_damage: "2",
	attack_cooldown: "10",
	points_value: "14",
	basic_type: "me.type",
	frogourmet_tag: "me.basic_type",
	taxonomy: "'mammal'",
	death_fx_type: "'milgramen'",
	acquirable_item_drop_value: "16",					

	x_target: "min(_x_bound,_x2_bound) + 1d(abs(_x_bound-_x2_bound))",
	y_target: "_desired_height - (_desired_height%8)",
	set_rotation: "set(rotate, sign(velocity_x)*(90 + 90*decimal(min(max(velocity_y,-1000),1000))/1000))",
	delayed_rotate: "decimal :: decimal(if(size(_oldrotate)>=4, _oldrotate[ size(_oldrotate)-4 ], rotate))",
	segment_count: "def(decimal hp) -> int lib.math.round(6*hitpoint_proportion(me.hitpoints))",


	create_segments: "set(_segments, map(range(segment_count(hitpoints)), object('worm_jumping.segment',midpoint_x,midpoint_y,{facing: facing})))",
	_last: "def([custom_obj] list) -> custom_obj|null if(size(list), list[size(list)-1])",
	
#-------------------------- hittable overrides --------------------------#
	handle_flinch: "def(obj hittable collide_with) -> commands null",
	handle_knockback: "def(obj hittable collide_with) -> commands null",
	handle_special_damage_response: "def(obj hittable|null collide_with) -> commands execute(me, if(collide_with is obj hittable,
			if(size(_segments) > 0 and segments_lost > 0, map(range(segments_lost), 'counter', fire_event(_segments[size(_segments)-(counter+1)],'die') ))
		
			where segments_lost = min(size(_segments), lib.math.round(size(_segments) * hitpoint_proportion(collide_with.attack_damage))  )
		))",
	hitpoint_proportion: "def(decimal portion) -> decimal decimal(portion)/decimal(me.max_hitpoints)",
	display_hurt_visuals: "def(interface {damage_type: string} collide_with, int amount) -> commands execute(me, 
					[map(_segments, 'thing', thing.display_hurt_visuals(collide_with, amount) ),
					hurt_flash_sequence
					])",
	
#-------------------------- vars --------------------------#
	_segments: { type: "[obj worm_jumping.segment]", default: [] },
	_oldrotate: { type: "[decimal]", default: [] },
	_x_bound: { type: "int", editor_info: { type: "x", value: "mid_x-(7*32)" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+(7*32)" } },
	_desired_height: { type: "int", editor_info: { type: "y", value: "midpoint_y" } },
	_leaptime: { type: "int", default: 0 },
},

on_rustle: "sound('gravel-rustle'+1d16+'.wav')", 

on_create: "[create_segments,add_particles('particles'), animation('invisible'),schedule(50+1d100, fire_event('begin_burrow_up')),set(fall_through_platforms,-1)]",
on_remove_segment: "if(last_segment != null, [remove_object(last_segment), fire_event(last_segment, 'detach')]) where last_segment = _last(filter(_segments, value in level.active_chars))",
on_lose_segment: "if(last_segment != null, [fire_event(last_segment,'die'), set(_segments, _segments[0: size(_segments)-1])]) where last_segment = _last(_segments)",

#for now, we just kill everything at once;  I poked at some delayed-action timing things, and they're a bit hairy - and we don't want them anyways because we're going to move to killing one segment at a time.
on_die: "[map(_segments, set(value.hitpoints,0)), set(_segments, [])]",
on_collide_level: "if(animation in ['leap'] and abs(cycle - _leaptime) > 10, [set(velocity_y,0), set(velocity_x,0), fire_event('begin_burrow_down')])",

#-------------------------- underground_handlers --------------------------#
on_finish_burrowing_down: "[animation('invisible'),set(particle_systems['particles'].spawn_rate, 0),schedule(50+1d100, fire_event('begin_burrow_up'))]",
on_end_invisible_anim: "animation('invisible')",

#-------------------------- burrow-down handlers --------------------------#
on_begin_burrow_down: "[set(particle_systems['particles'].spawn_rate, 1000), set(velocity_y,20), animation('burrow_down'), schedule(40, fire_event('finish_burrowing_down')),
			map(_segments, schedule(index*4, fire_event('remove_segment')))]",
on_end_burrow_down_anim: "animation('burrow_down')",

#-------------------------- burrow-up handlers --------------------------#
on_begin_burrow_up: "[set(_oldrotate,[]),schedule(60,fire_event('begin_leap')), set(particle_systems['particles'].spawn_rate, 1000),set(rotate,0),set(velocity_y,0), animation('burrow_up'), 
			[[set(midpoint_x, xval), set(midpoint_y, 0 + find_floor(xval, y_target-300,500).y)] where xval = x_target]]",
on_end_burrow_up_anim: "animation('burrow_up')",

#-------------------------- leap handlers --------------------------#
on_begin_leap: "[
			map(_segments, [set(value._headward_segment, if(index = 0, me, _segments[index-1])) ]),
			map(range(segment_count(hitpoints)), schedule(2*index, [add_object(_segments[index]), fire_event(_segments[index], 'attach' ), fire_event(_segments[index], 'process' )]) ),
			set(_leaptime, cycle),
			set(velocity_y,-1000),
			set(velocity_x,1d500 - 250),
			set(particle_systems['particles'].spawn_rate, 0),
			animation('leap')
			]",
on_end_leap_anim: "animation('leap')",
on_process_leap: "[set_rotation,add(_oldrotate, [rotate])]",
editor_info: {
	category: "enemies, cave",
},
animation: [
	{
		image: "enemies/worm-burrowing.png",
		pad: 0,
		body_area: "all",
		accel_y: 0,
		rect: [0,64,31,95],
		feet_x: 16,
		feet_y: 32,
		id: "burrow_up",
		frames: 4,
		events: "1:2:3:4:rustle",
		duration: 5,
	},
	{
		image: "enemies/worm-burrowing.png",
		pad: 0,
		body_area: "all",
		accel_y: 0,
		rect: [0,0,1,1],
		feet_x: 16,
		feet_y: 32,
		id: "invisible",
		frames: 1,
		duration: 100,
	},
	{
		image: "enemies/worm-burrowing.png",
		pad: 0,
		body_area: "all",
		accel_y: 0,
		rect: [128,32,159,63],
		feet_x: 16,
		feet_y: 32,
		id: "burrow_down",
		frames: 1,
		events: "0:rustle",
		duration: 40,
	},
	{
		image: "enemies/worm-burrowing.png",
		pad: 0,
		body_area: "all",
		accel_y: 20,
		rect: [0,32,31,63],
		feet_x: 16,
		feet_y: 32,
		id: "leap",
		frames: 4,
		duration: 5,
		attack_area: "all",
	},
],
particle_system: {
	id: "particles",
	zorder: "@include data/zorder.cfg:near_player_foreground_effects",
	type: "simple",
	spawn_rate: 0,
	time_to_live: 40,
	min_x: 18,
	max_x: 20,
	min_y: 38,
	max_y: 40,
	accel_y: 40,
	velocity_magnitude: 1000,
	velocity_magnitude_random: 500,
	velocity_rotate: 90,
	velocity_rotate_random: 180,
	animation: [
		{
			image: "enemies/worm-burrowing.png",
			id: "normal",
			duration: 60,
			rect: [0,96,15,111],
			frames: 1,
		},
		{
			image: "enemies/worm-burrowing.png",
			id: "normal",
			duration: 60,
			rect: [16,96,31,111],
			frames: 1,
		},
		{
			image: "enemies/worm-burrowing.png",
			id: "normal",
			duration: 60,
			rect: [0,112,15,127],
			frames: 1,
		},
		{
			image: "enemies/worm-burrowing.png",
			id: "normal",
			duration: 60,
			rect: [16,112,31,127],
			frames: 1,
		},
	],
},
object_type: [
	{
		id: "segment",
		prototype: ["hittable"],
		properties: {
			team: "'evil'",
			acquirable_item_drop_value: "0",					

			
			segdist: 20,
			set_position_relative: "def(decimal rotation) -> commands [set(relative_x, cos(rotation+90) * segdist),
												set(relative_y, sin(rotation+90) * segdist),
												set(rotate,rotation),
												add(_oldrotate, [rotation])]",
			delayed_rotate: "decimal :: decimal(if(size(_oldrotate)>=4, _oldrotate[ size(_oldrotate)-4 ], rotate))",
			get_hit_by: "def(obj hittable collide_with) -> commands [	if(_headward_segment is obj worm_jumping, _headward_segment.get_hit_by(collide_with)),
																		if(_headward_segment is obj worm_jumping.segment, _headward_segment.get_hit_by(collide_with))]",
			handle_damage: "def(obj hittable collide_with) -> commands [	if(_headward_segment is obj worm_jumping, _headward_segment.handle_damage(collide_with)),
																			if(_headward_segment is obj worm_jumping.segment, _headward_segment.handle_damage(collide_with))]",

			_oldrotate: { type: "[decimal]", default: [] },
			_headward_segment: { type: "obj worm_jumping|obj worm_jumping.segment", dynamic_initialization: true },
		},

		on_die: "[if(me in level.active_chars, death_effects('medium')),remove_object(me)]",
		on_attach: "[set(parent,_headward_segment),set(zsub_order,int(_headward_segment.zsub_order) -1)]",
		on_detach: "[set(parent, null),set(_oldrotate,[])]",
		on_process: "[set_position_relative( (decimal <- _headward_segment.delayed_rotate))]",
		on_end_normal_anim: "animation('normal')",
		animation: {
			image: "enemies/worm-burrowing.png",
			pad: 0,
			body_area: "all",
			accel_y: 0,
			rect: [0,0,31,31],
			id: "normal",
			frames: 4,
			duration: 5,
		},
	},
	{
		id: "thrown",
		prototype: ["throwable_small_enemy"],
		on_spat: "[proto_event('throwable_small_enemy', 'spat')]",
		animation: [
			{
				image: "enemies/generic.png",
				id: "thrown",
				thrown_area: "all",
				duration: 60,
				rect: [29,1,53,28],
				frames: 1,
				body_area: null,
			},
			{
				image: "enemies/generic.png",
				id: "on_back",
				rect: [29,1,53,28],
				frames: 2,
				duration: 5,
				body_area: "all",
			},
		],
	},
],
}
