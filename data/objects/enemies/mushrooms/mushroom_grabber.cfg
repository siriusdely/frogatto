{
id: "mushroom_grabber",

friction: 4000,
always_active: true,
prototype: ["ant_flying"],
zorder: "@include data/zorder.cfg:near_player_foreground_effects",
properties: {
	physical_size: 32,
	altitude_adjustment: "(wave(cycle*5+1000)/50)",
	handle_special_damage_response: "def(obj hittable|null collide_with) -> commands if(collide_with != null, if(final_damage_amount(collide_with, collide_with.attack_damage) > 0, [set(_time_last_spooked, cycle), set(_behavior, 'climb')]))",
	spook_duration: 200,
	is_spooked: "(cycle - _time_last_spooked < spook_duration)",

	default_anim: "'fly1'",
	
	dive_speed_x: "if(higher_difficulty, 30+1d30, 30)",
	dive_speed_y: "if(higher_difficulty, 30, 30)",
	climb_speed_x: "if(higher_difficulty, 15, 15)",
	climb_speed_y: "if(higher_difficulty, 12, 12)",
	
	should_dive: "if((not is_spooked) and can_seize_player,  if(
						level.player.y > y + 50 and level.player.y < _dive_height and
						level.player.midpoint_x > _x_bound and
						level.player.midpoint_x < _x2_bound, 1, 0))",

	should_climb: "if(midpoint_y > _dive_height or midpoint_y < _desired_height-20 or midpoint_x > _x2_bound or midpoint_x < _x_bound, 1, 0)",

	begin_dive: "	[
								if(level.player.midpoint_x > midpoint_x, facing(1), facing(-1)),
								set(_behavior, 'dive'),
								add(velocity_y,200)]",
	begin_climb: "		 [	set(_behavior, 'climb')]",
	process_dive: "		 [	if(level.player.midpoint_y > midpoint_y, add(velocity_y, dive_speed_y),add(velocity_y,-dive_speed_y) ),
								if(level.player.midpoint_x > midpoint_x, [try_facing(1),add(velocity_x, dive_speed_x)],[try_facing(-1),add(velocity_x,-dive_speed_x)] ),
							   	if(should_climb, begin_climb )]",
	process_climb: "	 [	if(midpoint_x < _init_x, [try_facing(1),add(velocity_x, climb_speed_x)],[try_facing(-1),add(velocity_x,-climb_speed_x)] ),
								if(midpoint_y < _init_y, add(velocity_y, climb_speed_y),add(velocity_y,-climb_speed_y) ),
								if(should_hover, begin_hover),
								]",
	begin_hover: "		 [	set(_behavior, 'hover')]",
	process_hover: "	 [	if(midpoint_x < _init_x, [try_facing(1),add(velocity_x, climb_speed_x)],[try_facing(-1),add(velocity_x,-climb_speed_x)] ),
								if(midpoint_y < _init_y, add(velocity_y, climb_speed_y),add(velocity_y,-climb_speed_y) ),
								if(should_dive, begin_dive)
									]",
	should_hover: "if(abs(midpoint_x - _init_x) < 100 and abs(midpoint_y - _init_y) < 100, 1, 0)",


	taxonomy: "'mushroom'",
	acquirable_item_drop_value: 10,					
	points_value: 14,
	
	central_process: "	 [if(is_carrying_player, carry_player),switch(_behavior,
							'', process_climb,
							'hover', process_hover,
							'dive', process_dive,
							'climb', process_climb,
							'regular', [proto_event('ant_flying', 'process_fly'), if(should_dive, begin_dive)]),
							set(rotate, sin(cycle*7) * 4.0),
							if(animation in ['fly1','fly2','fly3'], [set(animation, 'fly'+animation_suffix), set(time_in_animation, time_in_animation)])]",

	animation_suffix: "lib.math.round(sin(cycle*4)*1.0+1.0)+1",  //smoothly oscillate between 1 -> 3

	springiness: 190,
	spring_amount: 1200,
	bounce_roundness: 1,
	material_sound: "'fungus'",
	
	carry_player: "[set(level.player.mid_x, me.mid_x),set(level.player.y, me.y+10),set(level.player.velocity_y, me.velocity_y)]",
	is_carrying_player: "((cycle - _last_seized) < seize_duration)",
	can_seize_player: "(cycle - _last_seized > seize_duration*2)",
	seize_player: "[set(_last_seized, cycle),set(_behavior,'climb')]",
	seize_duration:  150,


#-------------------------- vars --------------------------#
	_dive_height: { type: "int", editor_info: { type: "y", value: "midpoint_y+(9*32)" } },

#-------------------------- tmp vars --------------------------#
	_behavior: { type: "string", default: "'neutral'", persistent: false },
	_last_clung: { type: "int", default: 0, persistent: false },
	_init_x: { type: "int", init: "midpoint_x", persistent: false },
	_init_y: { type: "int", init: "midpoint_y", persistent: false },
	_last_seized: { type: "int", default: -200, persistent: false },
	_time_last_spooked: { type: "int", default: -200, persistent: false },
},

on_collide_object_seize: "if(arg.collide_with = level.player, if((not is_carrying_player) and can_seize_player, [seize_player, sound('Mushroom-grab.wav')]))", 

on_create: "[			proto_event('ant_flying','create'),
						if(_behavior = null,set(_behavior,'hover')),
						animation(default_anim),
						if(_init_x = null, set(_init_x, midpoint_x)),
						if(_init_y = null, set(_init_y, midpoint_y)),
					]",
on_end_anim: "animation(default_anim)",
on_end_hurt_anim: "animation(default_anim)",


on_turn: "if(cycle-_last_turned > 30,[set(_last_turned,cycle),set(facing, -facing)])", #symmetric creature, so overrule the usual turn behavior because we have no turn anim

on_process: "central_process",
on_lose_wings: "#don't lose wings#",

on_wingflap: "[add(velocity_y,-150), sound_falloff('Jellyfish-Squish'+1d3+'.wav')]",

platform_area: [7,13,20,14],
on_bounced_on: "add(velocity_y,450)",

solid_area: null,
editor_info: {
	category: "enemies, forest",
},
animation: [
	{
		"@base": true,
		image: "enemies/mushroom-grabber.png",
		body_area: "all",
		accel_y: 0,
		feet_x: 22,
		feet_y: 22,
		pad: 0,
		seize_area: [4,18,24,28],
	},
	{
		id: "fly1",
		rect: [0,0,44,44],
		frames: 8,
		frames_per_row: 4,
		duration: 5,
		accel_x: 0,
		events: "8:wingflap",
		seize_area: [4,18,24,28],
	},
	{
		id: "fly2",
		rect: [0,90,44,134],
		frames: 8,
		frames_per_row: 4,
		duration: 5,
		accel_x: 0,
		events: "8:wingflap",
		seize_area: [4,18,24,28],
	},
	{
		id: "fly3",
		rect: [0,180,44,224],
		frames: 8,
		frames_per_row: 4,
		duration: 5,
		accel_x: 0,
		events: "8:wingflap",
		seize_area: [4,18,24,28],
	},
	{
		id: "spring",
		rect: [0,90,44,134],
		frames: 1,
		duration: 3,
	},
	{
		id: "turn",
		rect: [0,90,44,134],
		frames: 1,
		duration: 3,
		attack_area: [4,18,24,28],
	},
	{
		id: "hurt",
		rect: [0,90,44,134],
		frames: 1,
		duration: 18,
	},
],
object_type: {
	id: "thrown",
	prototype: ["throwable_small_enemy"],
	properties: {
		acquirable_item_drop_value: 10,					
		points_value: 14,
		default_anim: "'fly1'",
	},

	#specifically trigger death here because non-solid objects don't have a water-level
	on_enter_water: "[handle_death({damage_type: 'neutral'}),die()]",
	on_die: "if(me.underwater, null, proto_event('throwable_small_enemy', 'die'))",
	animation: [
		{
			image: "enemies/mushroom-jellyfish.png",
			id: "thrown",
			thrown_area: "all",
			duration: 60,
			rect: [175,37,201,70],
			frames: 1,
			body_area: null,
		},
		{
			image: "enemies/mushroom-jellyfish.png",
			id: "on_back",
			rect: [175,37,201,70],
			frames: 2,
			pad:2,
			duration: 5,
			body_area: "all",
		},
	],
},
}
