{
id: "kitty_robot",
mass: 30,
friction: 200,
solid_area: [14,0,44,40],
solid_dimensions: ["boss"],
prototype: ["hittable"],
is_strict: true,
hitpoints: 10000000,   #bogus, gets reset in on_create

properties: {
	team: "'evil'",
	attack_damage: "1",
	hurt_velocity_y: "-20",
	basic_type: "'kitty_robot'",

	too_close: "abs(level.player.mid_x - mid_x) < too_close_range",
	in_attack_range: "abs(level.player.mid_x - mid_x) < attack_range and
	  abs(level.player.mid_y - mid_y) < vertical_attack_range",
	fire_missile: "if(_missile_load_counter < missile_load_time, add(_missile_load_counter, 1), [spawn('cannon.missile', mid_x + facing*90, mid_y-14, facing,
	           [set(child.velocity_x, 800*facing)]), spawn('explosion_spark', mid_x+ facing*50, mid_y -14, facing),sound('cannon.ogg'), set(_missile_load_counter, 0), 
	           		schedule(4, [spawn('cannon.missile', mid_x + facing*20, mid_y-14, facing,
	           [set(child.velocity_x, 800*facing)]), spawn('explosion_spark', mid_x+ facing*1, mid_y -14, facing),sound('cannon.ogg')])])",

	too_close_range: "200",
	attack_range: "500",
	vertical_attack_range: "200",
	missile_load_time: "12",


	death_events: "[
		fire_event(get_object_or_die(level, 'kitty_robot_controller'), 'boss_killed'),
		remove_object(_pilot),

		remove_boss_hp_bar,
		spawn('explosion_big_recurring',  mid_x, mid_y, facing),
		spawn('dying_robot_leg_fragment1', mid_x, mid_y, facing),
		spawn('dying_robot_leg_fragment2', mid_x, mid_y, facing),
		spawn('dying_robot_main_fragment', mid_x, mid_y, facing),
	]",

	#-------------------------- boss HUD stuff --------------------------#
	add_boss_hp_bar: "map(level.gui, set(gui_vars.bosses, current_bosses + [me]) where current_bosses = [object] <- gui_vars.bosses where gui_vars = object <- value.vars)",
	remove_boss_hp_bar: "map(level.gui, set(gui_vars.bosses, []) where current_bosses = [object] <- gui_vars.bosses where gui_vars = object <- value.vars)",


	#--------------------------  vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "x" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "x + img_w" } },
	_missile_load_counter: { type: "int", default: 0, persistent: false },
	_pilot: { type: "obj kitty_pilot", init: "object('kitty_pilot', mid_x, mid_y, {facing: facing, zorder: zorder-1})", persistent: false  },

},

on_die: "death_events",
on_create: "[add_object(_pilot), add_boss_hp_bar, set_max_hitpoints({casual: standard_thrown_damage * 4, challenging: standard_thrown_damage * 8}),]",
on_process: "[set(_pilot.mid_x, mid_x + facing*10), set(_pilot.mid_y, mid_y-40), set(_pilot.facing, facing)]",
on_end_anim: "if(animation = 'prepare_jump', [animation('jump'),set(velocity_y,-1000),sound('robot-kitty-jump.wav')],
if(animation = 'jump' and (not is_standing), [animation('jump')],
if(in_attack_range and (not too_close),
  if(level.player.y2 < y and is_standing, [animation('prepare_jump')],
  if((level.player.mid_x > mid_x) != (facing > 0),
	  [animation('turn'), set(facing, -facing)],
      [set(accel_x, 0), animation('normal'), fire_missile])),

  if(facing < 0 and x < _x_bound or facing > 0 and x2 > _x2_bound, [animation('turn'), set(facing, -facing)], animation('walk')))))",
on_collide_side: "if(arg.collide_with != null and arg.collide_with is obj hittable, [if(arg.collide_with.get_hit_by, arg.collide_with.get_hit_by(me))], [if((velocity_x > 0) = (facing > 0), [animation('turn'), set(facing, -facing)]), set(velocity_x, 0)])",
on_collide_feet: "[animation('land'),if(standing_on, [fire_event(standing_on, 'bounced_on', mapping('xxx', 5)), if(standing_on is obj hittable, if(standing_on.get_hit_by, standing_on.get_hit_by(me)))]), shake_screen(0,100,0,-100)]",
editor_info: {
	category: "enemies, milgramen",
},
animation: [
	{
		"@base": true,
		image: "vehicles/robot-milgram.png",
		accel_x: 0,
		accel_y: 30,
		pad: 3,
		body_area: "all",
	},
	{
		id: "normal",
		rect: [1,43,46,83],
		frames: 1,
		duration: 6,
	},
	{
		id: "hurt",
		rect: [1,43,46,83],
		frames: 1,
		duration: 6,
	},
	{
		id: "turn",
		rect: [49,42,96,82],
		frames: 3,
		duration: 6,
	},
	{
		accel_x: 200,
		id: "walk",
		rect: [1,91,46,131],
		frames: 2,
		duration: 6,
	},
	{
		id: "prepare_jump",
		rect: [1,138,46,178],
		frames: 3,
		duration: 3,
		reverse: true,
	},
	{
		id: "land",
		sound: "thump.wav",
		rect: [1,138,46,178],
		frames: 3,
		duration: 2,
		reverse: true,
	},
	{
		id: "jump",
		rect: [149,133,194,178],
		frames: 1,
		duration: 10,
	},
],
object_type: [
	{
		id: "controller",
		always_active: true,
		hidden_in_game: true,
		is_strict: true,
		editor_info: {
			category: "controllers, boss",
		},
		properties: {
			_has_triggered: { type: "bool", default: false, persistent: false },
			_x_bound: { type: "int", editor_info: { type: "x", value: "x-100" } },
			_x2_bound: { type: "int", editor_info: { type: "x", value: "x+150" } },
			_y_bound: { type: "int", editor_info: { type: "y", value: "y-100" } },
			_y2_bound: { type: "int", editor_info: { type: "y", value: "y+150" } },
			
			_the_boss: { type: "obj kitty_robot", init: "object('kitty_robot', -960, -1105, {_x_bound:-960, _x2_bound:-864})" },
		},

		on_create: "if(level.player.get_stored_event('dungeon_crawling_faux_boss_fight_won'), [
			remove_object(me),
		])",

		on_process: "if(level.player.mid_x > _x_bound and level.player.mid_x < _x2_bound  and level.player.mid_y > _y_bound and level.player.mid_y < _y2_bound and _has_triggered = false, [fire_event('triggered'),set(_has_triggered,true)])",

		on_triggered: "[
			add_object(_the_boss),
			fire_event(get_object_or_die(level, 'gate1'), 'lock'),
			music('neoBoss.ogg')
		]",
		
		on_boss_killed: "[
			fire_event(get_object_or_die(level, 'gate1'), 'unlock'),
			level.player.store_event('dungeon_crawling_faux_boss_fight_won',1),
			title('Victory!'),
			music('100hrtemp.ogg'),
			music_onetime('FrogattoTitle.ogg'),
		
		]",
		
		animation: {
			id: "normal",
			image: "effects/particles.png",
			x: 86, y: 73, w: 28, h: 28,
			duration: -1,
		},
	}
],
}
