{
id: "gazer_grey",
prototype: ["ant_flying"],

editor_info: {
	category: "enemies, cave",
},

solid_area: null,

properties: {
	points_value: 23,
	altitude_adjustment: "(wave(cycle*5+1000)/50)",
	
	should_dive: "
		(level.cycle - _last_fired) > 200                    
		and abs(mid_y - level.player.mid_y) > 50 
		and abs(mid_y - level.player.mid_y) < 350  
		and sign(level.player.mid_x - mid_x) = me.facing //Are we facing the player?                       
		and abs(mid_x - level.player.mid_x) > 200 //Check that the player isn't *right under us*, and that there isn't solid between us. Either would cause us to slam into something in a very broken-looking manner.
		and abs(mid_x - level.player.mid_x) < 400
		/*and (not floor_level_beneath_character(self.mid_x, self.mid_y, self) > level.player.mid_y)*/
		and not strstr(level.player.animation, 'swim')",

	shoot: " [
		sound('gazer-shot.wav', 0.1),
		set(_last_fired, level.cycle),
		add(velocity_x, -300*facing),
		spawn(me.type+'.shot', 
			mid_x+20*facing, mid_y, facing, 
			set(child.velocity_x, facing*(level.player.difficulty+1)*600) ), 
		spawn(me.type+'.shot_bloom', 
			mid_x+20*facing, mid_y, {facing: facing, parent: me}), 
	]",
	physical_size: "int :: 32",


	_last_fired: { type: "int", default: -200, persistent: false },
	_last_shifted: { type: "int", default: -200, persistent: false },
	_mdistort: {
		type: "class motion_distort", 
		persistent: false, 
		init: "construct('motion_distort', {obj:me, squash:false})",
	},
},

on_lose_wings: "/*don't*/",

on_create: "[
	proto_event('ant_flying','create'),
	schedule(5d20, fire_event('check_for_attack_opportunity')),
	animation('fly'),
]",

on_check_for_attack_opportunity: "
	if(should_dive, 
		fire_event('windup'),
		schedule(5d10, fire_event('check_for_attack_opportunity')) )", //Wait a time, be unpredictable.
		
on_windup: "[
	set(_last_shifted, level.cycle),
	animation('dive'),
	sound_falloff('gazer-aggro.wav'),
	set(accel_x, 0),
	set(accel_y, 0),
	
	map(range(stop_dist), 'frame', schedule(frame, 
		set(velocity_x, lib.math.interpolate(velocity_x, lib.math.sin_out(frame/stop_dist), 0)),
	)),
	
	map(range(windup), 'frame', schedule(frame, 
		set(y, decimal(lib.math.interpolate(
			[y, y+hover_height, y+hover_height-windup/2/2], 
			lib.math.sin_out(frame/windup)))),
	)),
	
	schedule(lib.math.round(windup), fire_event('dive')),
	//We have the dive in a separate event because Frogatto has probably moved since this event was triggered, 50 frames ago.
	
] where hover_height = -20, //pixels
        stop_dist = 20.0,  //frames
        windup = 30.0     //frames",

on_dive: "[
	//Note: We must set y each frame, since our prototype will be trying to do that for us.
	map(range(dive_duration), 'step', schedule(step, 
		set(mid_y, lib.math.interpolate(
			mid_y, lib.math.sin_in_out(step/dive_duration), level.player.mid_y))
	)),
	map(range(padding*2), 'step', schedule(lib.math.round(dive_duration + step), 
		set(mid_y, level.player.mid_y)
	)),
	schedule(lib.math.round(dive_duration), fire_event('shoot')),
	map(range(dive_duration*3), 'step', schedule(lib.math.round(dive_duration + padding*2 + step), 
		set(mid_y, lib.math.interpolate(
			level.player.mid_y, 
			lib.math.sin_in_out(step/dive_duration/3), 
			_desired_height+return_error ))
	)),
	schedule(lib.math.round(dive_duration*2 + padding*2), [
		set(facing, -facing),
		animation('turn'),
		_mdistort.stop(me),
		schedule(10d20, fire_event('check_for_attack_opportunity')),
	]),
] where dive_duration = 10.0, padding = 20.0, return_error=2d40-40",

on_shoot: "shoot", //This is a common technique use in FFL. Since "shoot" reads our position from the variable /me/, rather than having a position passed in, we have to fire it in a separate event. Otherwise, it would be evaluated with the args as they were when the schedule function was encountered, many frames before the scheduled task was executed. For example, if we were at 0,10 and we dove into our attack at 0,50, we'd schedule this event for when we were at the bottom of our dive. This event is called, and the "shoot" property spawns a shot at 0,50 because that's where we are. Now, on the other hand, if we just schedule()'d "shoot", we would call the schedule function with the return value of "shoot". That value would be instructions to the engine to say to schedule a shot at our current location -- which is 0,10. The instructions would be evaluated at 0,50, however, so they'd just spawn a shot where we were.

on_process: "[proto_event('ant_flying','process'),set(rotate, sin(cycle*7) * 4.0)]",
on_process_dive: "_mdistort.process()",
on_end_dive_anim: "animation('dive')",

on_end_anim: "if(animation != 'dive', animation('fly'))",

animation: [

	{
		"@base": true,
		image: "enemies/gazer-grey.png",
		pad: 3,
		accel_x: 0,
		accel_y: 0,
		body_area: "all",
		attack_area: [4,18,24,28],
	},
	{
		accel_x: 10,
		id: "fly",
		rect: [1,1,41,41],
		frames: 3,
		reverse: true,
		duration: 5,
	},
	{
		accel_x: 10,
		id: "fly",
		rect: [1,1,41,41],
		frames: 3,
		reverse: true,
		duration: 6,
	},
	{
		id: "dive",
		rect: [1,1,41,41],
		frames: 3,
		reverse: true,
		duration: 6,
	},
	{
		id: "turn",
		rect: [1,45,41,85],
		frames: 7,
		duration: 3,
	},
	{
		accel_y: 20,
		id: "hurt",
		rect: [1,89,41,129],
		frames: 1,
		duration: 18,
	},
],

object_type: [
	{
		id: "shot",
		prototype: ["shot"],
		object_level_collisions: false,
		properties: {
			attack_damage: "if(higher_difficulty, 3, 1)",
		
		},
		traction_in_air: 1000,
		timer_frequency: 200,
		on_timer: "die()",
		on_end_anim: "set(animation, animation)",
		on_die: "[spawn('gazer_grey.shot_explode', mid_x, mid_y, facing), sound('homingimpact.wav')]",
		animation: {
			image: "enemies/gazer-grey.png",
			id: "normal",
			duration: 3,
			rect: [134,1,151,18],
			pad: 3,
			frames: 5,
			attack_area: "all",
			accel_x: 20,
		},
	},
	{
		id: "shot_bloom",
		on_end_anim: "die()",
		animation: {
			image: "enemies/gazer-grey.png",
			id: "normal",
			duration: 2,
			pad: 3,
			rect: [239,1,279,29],
			frames: 5,
		},
	},
	{
		id: "shot_explode",
		on_end_anim: "die()",
		animation: {
			image: "enemies/gazer-grey.png",
			id: "normal",
			duration: 2,
			pad: 3,
			rect: [309,33,326,50],
			frames: 6,
		},
	},
],

}
