//This object is automatically spawned by "sound-sources" in-game; it doesn't need to manually be placed by people editing levels, nor does it need to be spawned by object-writers who are using sound-sources to give in-game objects a tracked sound.  This coordinates multiple instances of a single sound so that only one instance of them plays at a given time, passing control to a new one if one of them is going to be removed.

{
id: "sound_source_coordinator",
hidden_in_game: true,
always_active: true,

properties: {
	add: "def(obj sound_source source) -> commands [
		add(self.monitoring, [source]),
		set(source._sound_coordinator, self),
	]",
	remove: "def(obj sound_source source) -> commands [
		set(self.monitoring, newMonitoring),
		set(source._sound_coordinator, null),
		//if(not newMonitoring, remove_object(self)),
	] where newMonitoring = filter(self.monitoring, value!=source)",
	
	loudest_source: "decimal <- max(map(monitoring, value.sound_volume_multiplier(value, level.player)))",
	

	max_delta: "decimal :: 0.1",

#-------------------------- vars --------------------------#
		
	sound_file: { type: "string", dynamic_initialization: true },
	monitoring: { type: "[obj sound_source]", default: [] },		//Sources to monitor. We'll only play the loudest one... not technically correct, but close enough.
	old_loudest_source: { type: "decimal", default: 0 },
	
},

on_create: "sound_loop(sound_file, 0)",

on_process: "[
	set(old_loudest_source, newVol),
	sound_volume(lib.math.round(newVol*128)),
	//debug(newVol),
	] where newVol = 
		if(old_loudest_source != null, 
			lib.math.constrain(	old_loudest_source - max_delta, 
						loudest_source, 
						old_loudest_source + max_delta), 
			loudest_source)",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
}

