//The mana bar displays how much energy for abilities we have.
{
	id: "boss_progress_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	hidden_in_game: true,
	serializable: false,
	
	zorder: "@include data/zorder.cfg:in_front_of_everything",
	no_compile_image: "gui/progress-bar-center.png,gui/progress-bar-well-center.png",

	properties: {
		bar_tween_speed: 4.0, //Decimal. Larger numbers = slower bar adjustment.
	
		heart_icon: {
			type: "widget", 
			init: "widget(me, {
				type: 'image',
				visible: false,
				x: 20,
				y: -56,
				image: 'gui/hud.png',
				area: [101,47,126,72], //xyxy
			})",
		},
		
		health_bar_background: {
			type: "bar_widget", 
			init: "bar_widget <- widget(me, {
				type: 'bar',
				visible: false,
				segment_length: level.camera_position[2]/2-90,
				left_cap_length: 8,
				right_cap_length: 8,
				x: 90,
				y: -44,
				bar: {
					image: 'gui/progress-bar-well-center.png',
					area: [0,0,1,11], //xywh
				},
				left_cap: {
					image: 'gui/progress-bar-well-endcaps.png',
					area: [0,0,8,11],
				},
				right_cap: {
					image: 'gui/progress-bar-well-endcaps.png',
					area: [8,16,8,11],
				},
			})",
		},
		
		health_bar: {
			type: "bar_widget", 
			init: "bar_widget <- widget(me, {
				type: 'bar',
				visible: false,
				segment_length: 1,
				left_cap_length: 8,
				right_cap_length: 8,
				x: 90,
				y: -44+4,
				bar: {
					image: 'gui/progress-bar-center.png',
					area: [0,0,1,7], //xywh
				},
				left_cap: {
					image: 'gui/progress-bar-endcaps.png',
					area: [0,0,8,7],
				},
				right_cap: {
					image: 'gui/progress-bar-endcaps.png',
					area: [0,8,8,7],
				},
			})",
		},
		
		last_displayed_value: { type: "decimal", default: 1.0 },
		
		reset: "def() -> commands [
			set((object<-level.gui[0].vars).bosses, []),                //Clear any saved bosses from the level. When the checkpoint is activated, it doesn't muck around with any of the level variables.
			map([widget]<-widgets.children, set(value.visible, false)), //Hide the display.
			set(last_displayed_value, 1.0),                             //And set the length to one px so the next animation picks up normally.
		]",
	},
	
	on_create: "[
		set_widgets(heart_icon, health_bar_background, health_bar),
	]",
	
	on_process: "if(max_hp, [
		set(last_displayed_value, display_value),
		map([widget]<-widgets.children, set(value.visible, bool(display_length))),
		if(display_length, 
			set(health_bar.segment_length, display_length),
			set((object<-level.gui[0].vars).bosses, [])
		),
	] 
		where display_length = round(health_bar_background.segment_length*display_value/1.0/max_hp)
		where display_value = if(abs(step) < 0.001, hp, last_displayed_value+step)
		where step = (hp - last_displayed_value) / bar_tween_speed
		where hp = fold([int]<-map([object]<-(object<-level.gui[0].vars).bosses, value.hitpoints), a+b)
	) where max_hp = fold([int]<-map([object]<-(object<-level.gui[0].vars).bosses, value.max_hitpoints), a+b)",
}

/* PREVIOUSLY, IN hud.cfg:
	//// Calculate the boss HP bar at the bottom during boss-fights! You add objects to the player's bosses variable to turn this on, and when they die it turns off.
	if(object.vars.bosses or object.vars.boss_hitpoints, [ //vars.boss_hitpoints animates to 0 after the last boss is killed, so we need to check for no boss hp *being displayed* before we remove the bar.
		if(target_hitpoints <= 0, set(object.vars.bosses, [])),
		if(object.vars.boss_hitpoints != target_hitpoints, //Make the bar fill up asymptotically (filling another half every cycle) so that it looks cool and smooth, but cap this once the divisions reach roughly 1 pixel in size, so it doesn't take infinite time.  This provides the looks cool benefits of gradually filling the bar, with an immediate sense of how far the current motion is going to reach since humans are good at intuitively judging rates of change.
			 set(object.vars.boss_hitpoints, 
				if(abs(target_hitpoints - object.vars.boss_hitpoints) < 0.001, target_hitpoints, object.vars.boss_hitpoints + (target_hitpoints - object.vars.boss_hitpoints)*0.15 )))
		] where target_hitpoints = if(object.vars.bosses, 
			sum(map(object.vars.bosses, value.hitpoints))
				/decimal(sum(map(object.vars.bosses, value.max_hitpoints))) ) ),
				
				
	...
		

	//// The boss health bar.
	if(object.vars.boss_hitpoints, ([
		draw_animation('charge_bar_well_left', well_start, SCREEN_HEIGHT - 44),
		draw_animation_area('charge_bar_well_center', well_start + 16, SCREEN_HEIGHT - 44, well_size/2),
		draw_animation('charge_bar_well_right', well_start + well_size - 16, SCREEN_HEIGHT - 44),
		draw_animation('boss_angryface_heart_icon', 20, SCREEN_HEIGHT - 56),
		
		if(boss_hitpoints < 20, [
			draw_animation_area('charge_bar_left', bar_start, SCREEN_HEIGHT - 40, boss_hitpoints/4),
			draw_animation_area('charge_bar_right', bar_start + boss_hitpoints/2, SCREEN_HEIGHT - 40, 5 - boss_hitpoints/4, 0, boss_hitpoints/4, 5),
		],[
			draw_animation_area('charge_bar_center', bar_start + 10, SCREEN_HEIGHT - 40, (boss_hitpoints)/2),
			draw_animation('charge_bar_left', bar_start, SCREEN_HEIGHT - 40),
			draw_animation('charge_bar_right', bar_start + boss_hitpoints, SCREEN_HEIGHT - 40),
		]),
	] where boss_hitpoints = object.vars.boss_hitpoints * bar_size
	where bar_size = well_size - 2
	where well_size = 640,
		bar_start = well_start + 4
	where well_start = 90 )),
*/