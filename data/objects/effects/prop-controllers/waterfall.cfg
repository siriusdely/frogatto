{
id: "waterfall",
zorder: "@include data/zorder.cfg:near_player_foreground_effects",
is_strict: true,
properties: {
	graphical_width: "abs(_x2_bound - _x_bound)*2",


#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "x-100" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "x+150" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "y-100" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "y+150" } },

	_offset: { type: "decimal", default: 0, persistent: false },
	_sfx: { type: "obj sound_source_area", init: "object('sound_source_area', mid_x, mid_y,{ sound_file:'ambient/waterfall-heavy.ogg', _x_bound:0, _x2_bound:0, _y_bound:0, _y2_bound:0})", persistent: false },

},
on_create: "[

				set(alpha,255),fire_event('calculate_segments'),
				add_particles('steam'),add_particles('steam_rising'),add_particles('splash_off_player'), fire_event('setup_particles'),
				spawn('${self.type}.overlay',mid_x,mid_y, {facing:facing, _x_bound:_x_bound, _x2_bound:_x2_bound, _y_bound:_y_bound, _y2_bound:_y2_bound} ),
				spawn('${self.type}.left_sidecap',mid_x,mid_y, {facing:facing, _x_bound:_x_bound-32, _x2_bound:_x_bound, _y_bound:_y_bound, _y2_bound:_y2_bound}  ),
				spawn('${self.type}.right_sidecap',mid_x,mid_y, {facing:facing, _x_bound:_x2_bound, _x2_bound:_x2_bound+32, _y_bound:_y_bound, _y2_bound:_y2_bound}  ),


				
				spawn('current_generator',mid_x,mid_y,{facing:1, invisible:true,  _x_bound:_x_bound-32, _x2_bound:_x2_bound+32, _y_bound:_y_bound, _y2_bound:_y2_bound, strength:3000, current_vel_x:0, current_vel_y:600}),
				
				set(_sfx._x_bound, _x_bound), set(_sfx._x2_bound, _x2_bound), set(_sfx._y_bound, _y_bound), set(_sfx._y2_bound, _y2_bound), 
				add_object(_sfx),
				]",
				
on_calculate_segments: "[set(x,_x_bound),set(y,_y_bound),set(draw_area, [0, _offset, abs(_x2_bound-_x_bound)/2, abs(_y2_bound-_y_bound)/2])]",
on_process: "[add(_offset,-10),fire_event('calculate_segments'),
	
	if(level.player.mid_x > _x_bound and level.player.mid_x < _x2_bound and level.player.mid_y > _y_bound and level.player.mid_y < _y2_bound,
		[set(particle_systems['splash_off_player'].generation_rate, 2000),set(particle_systems['splash_off_player'].pos_x, level.player.mid_x - x -10),set(particle_systems['splash_off_player'].pos_y, (level.player.mid_y + level.player.y)/2 - y) ],
		set(particle_systems['splash_off_player'].generation_rate, 0))
	]",

#we don't want to compile the image since we rely on it tiling.
no_compile_image: "effects/waterfall.png",
on_setup_particles: "[
		set(particle_systems['steam'].pos_x, -20),
		set(particle_systems['steam'].pos_y, -40),
		set(particle_systems['steam'].pos_x_rand, graphical_width/1.5),
		set(particle_systems['steam'].generation_rate, 30*(_x2_bound-_x_bound)),
		
		set(particle_systems['steam_rising'].pos_x, -20),
		set(particle_systems['steam_rising'].pos_y, _y2_bound -y),
		set(particle_systems['steam_rising'].pos_x_rand, graphical_width/1.5),
		set(particle_systems['steam_rising'].generation_rate, 200*(_x2_bound-_x_bound)),
		
		]",
editor_info: {
	category: "controllers",
},
animation: {
	no_remove_alpha_borders: true,
	image: "effects/waterfall.png",
	id: "normal",
	x: 0,
	w: 32,
	y: 0,
	h: 255,
},
particle_system: [
	{
		id: "steam",
		type: "point",
		generation_rate_millis: 4000,
		time_to_live: 70,

		# fade in for the first 20 cycles, then gradually fade out for the next
		# 40, and then rapidly fade out for the final 10.
		colors_expression: "map(range(20), 'x', [255, 255, 255, x*6]) + map(range(40), 'x', [255, 255, 255, 120 - x]) + map(range(10), 'x', [255, 255, 255, 80 - x*8])",
		dot_size: 6,
		dot_rounded: true,
		pos_x: -10,
		pos_x_rand: 180,
		pos_y: -60,
		velocity_x: -150,
		velocity_x_rand: 300,
		velocity_y: 1500,
		velocity_y_rand: 2500,
	},
	{
		id: "steam_rising",
		type: "point",
		generation_rate_millis: 4000,
		time_to_live: 122,
		red: 255,
		green: 255,
		blue: 255,
		alpha: 123,
		alpha_delta: -1,
		dot_size: 2,
		dot_rounded: true,
		pos_x: -10,
		pos_x_rand: 180,
		pos_y: -60,
		velocity_x: -500,
		velocity_x_rand: 1000,
		velocity_y: -1500,
		velocity_y_rand: 1700,
	},
	{
		id: "splash_off_player",
		type: "point",
		generation_rate_millis: 0,
		time_to_live: 30,
		red: 255,
		green: 255,
		blue: 255,
		alpha: 255,
		dot_size: 1,
		pos_x: -10,
		pos_x_rand: 20,
		pos_y: -60,
		velocity_x: -2000,
		velocity_x_rand: 4000,
		velocity_y: -200,
		velocity_y_rand: 9000,
	},
],
object_type: [
	{
		id: "left_sidecap",
		zorder: "@include data/zorder.cfg:exterior_decor",
		properties: {
		#-------------------------- vars --------------------------#
			_x_bound: { type: "int", default: 0, persistent: false },
			_x2_bound: { type: "int", default: 0, persistent: false },
			_y_bound: { type: "int", default: 0, persistent: false },
			_y2_bound: { type: "int", default: 0, persistent: false },

			_offset: { type: "decimal", default: 0, persistent: false },
		},
		
		on_create: "[fire_event('calculate_segments')]",
		on_calculate_segments: "[set(x,_x_bound),set(y,_y_bound),set(draw_area, [0, _offset, abs(_x2_bound-_x_bound)/2, abs(_y2_bound-_y_bound)/2])]",
		on_process: "[add(_offset,-7),fire_event('calculate_segments')]",

		no_compile_image: "effects/waterfall_edge_left.png",	#we don't want to compile the image since we rely on it tiling.
		animation: {
			no_remove_alpha_borders: true,
			image: "effects/waterfall_edge_left.png",
			id: "normal",
			x: 0,
			w: 16,
			y: 0,
			h: 64,
		},
	},
	{
		id: "right_sidecap",
		zorder: "@include data/zorder.cfg:exterior_decor",
		properties: {
		#-------------------------- vars --------------------------#
			_x_bound: { type: "int", default: 0, persistent: false },
			_x2_bound: { type: "int", default: 0, persistent: false },
			_y_bound: { type: "int", default: 0, persistent: false },
			_y2_bound: { type: "int", default: 0, persistent: false },

			_offset: { type: "decimal", default: 0, persistent: false },
		},
		on_create: "[fire_event('calculate_segments'),set(me.alpha,180)]",
		on_calculate_segments: "[set(x,_x_bound),set(y,_y_bound),set(draw_area, [0, _offset, abs(_x2_bound-_x_bound)/2, abs(_y2_bound-_y_bound)/2])]",
		on_process: "[add(_offset,-7),fire_event('calculate_segments')]",

		#we don't want to compile the image since we rely on it tiling.
		no_compile_image: "effects/waterfall_edge_right.png",
		animation: {
			no_remove_alpha_borders: true,
			image: "effects/waterfall_edge_right.png",
			id: "normal",
			x: 0,
			w: 16,
			y: 0,
			h: 64,
		},
	},
	{
		id: "overlay",
		zorder: "@include data/zorder.cfg:exterior_decor",
		properties: {
		#-------------------------- vars --------------------------#
			_x_bound: { type: "int", default: 0, persistent: false },
			_x2_bound: { type: "int", default: 0, persistent: false },
			_y_bound: { type: "int", default: 0, persistent: false },
			_y2_bound: { type: "int", default: 0, persistent: false },

			_offset: { type: "decimal", default: 0, persistent: false },
		},
		on_create: "[fire_event('calculate_segments'),set(alpha,255)]",
		on_calculate_segments: "[set(x,_x_bound),set(y,_y_bound),set(draw_area, [0, _offset, abs(_x2_bound-_x_bound)/2, abs(_y2_bound-_y_bound)/2])]",
		on_process: "[add(_offset,-6),fire_event('calculate_segments')]",

		#we don't want to compile the image since we rely on it tiling.
		no_compile_image: "effects/waterfall_overlay.png",
		animation: {
			image: "effects/waterfall_overlay.png",
			id: "normal",
			x: 0,
			w: 32,
			y: 0,
			h: 256,
		},
	},
],
}