{
id: "match-lock",
next_animation: "'normal'",
always_active: false,
zorder: "@include data/zorder.cfg:interior_decor",
properties: {
	colour: "def(obj) [set(obj.red, vars.red*50), set(obj.green, vars.green*50), set(obj.blue, vars.blue*50)]",
},
on_start_level: "[
		spawn('${self.type}.backing', midpoint_x, midpoint_y, facing),
		set(alpha, 0),
		]",
timer_frequency: 3,
on_timer: "if(lib.math.length(midpoint_x, midpoint_y, level.player.midpoint_x, level.player.midpoint_y) < 35 and alpha = 0, fire_event('triggered'))",
on_triggered: "[
		transform(range(6), schedule(v, set(alpha, v*51))), #(6-1)*51=255, full opacity.#
		if(overseer, 
			schedule(30, fire_event(overseer, 'match', self)), 
			debug('ERROR: No match_lock_controller for group ${self.vars.group} found.')
			) where overseer = find(level.chars, 'char', char.type = 'match_lock_controller' and char.vars.group = context.self.vars.group),
		]",
on_fail: "transform(range(t+1), schedule(v, set(alpha, (t-v)*51))) where t = 5",
editor_info: {
	category: "keys & triggers",
	help: "Place pairs of these. When all pairs in the group are lit,
			 an event specified in the match_lock_controller will
			 be fired. The positions of these triggers will be randomly
			 shuffled on level load, Enigma-style.",
	var: {
		name: "group",
		type: "int",
		value: 1,
	},
},
animation: {
	id: "blank",
	image: "props/match-buttons.png",
	x: 0,
	y: 0,
	w: 32,
	h: 32,
	frames: 1,
	duration: 1000000000,
},
object_type: {
	id: "backing",
	next_animation: "'normal'",
	always_active: false,
	zorder: -6,
	animation: {
		id: "normal",
		image: "props/match-buttons.png",
		x: 0,
		y: 0,
		w: 32,
		h: 32,
		frames: 1,
		duration: 1000000000,
	},
},
}