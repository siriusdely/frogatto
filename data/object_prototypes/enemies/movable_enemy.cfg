/*
 this should be one of two primary enemy prototypes; essentially we have a divide between "enemies which can move", and "enemies which are permanently fixed in one location".  Those which can move have a bunch of extra baggage in order to handle physical collision, those which don't are much more lightweight.
 
 The key thing about this prototype is providing the "feel" of the average enemy in the game; providing a bunch of stock behaviors governing how they bounce off walls, floors and ceilings, etc, so that all mobile enemies feel like they're governed by consistent physical laws.
 
 We bake in two common assumptions to this prototype; we have the hooks for swallowability (though it can easily be turned off) since most mobile enemies are swallow/throwable.  We also have the hooks for springiness/bounceability.
 
 Required animations:  [default_anim, 'turn']
 Optional animations:  ['spring', 'hurt']
*/


{
id: "movable_enemy",
prototype: ["hittable"],
mass: 5,
friction: 1000,
traction: 1000,

hitpoints: 50,
solid_area: [5,10,20,25],
solid_dimensions: ["enemy","common"],

properties: {
	swallowable: "bool :: true",
	team: "'evil'",
	hurt_velocity_y: "int :: -400",
	hurt_velocity_x: "int :: 200",
	attack_damage: "int :: if(not underwater, if(higher_difficulty, 2, 1), 0)",
	taxonomy: "string :: 'bug'",
	acquirable_item_drop_value: "int :: 10",					
	points_value: "int :: 10",
	
	default_anim: "string :: 'stand'",		# often replaced for enemies like fliers which don't 'stand'
											#TODO: check if this is safe to replace with 'walk' in subsequent prototypes like ant; we want 'stand' in the base, but aggressive walkers may not flinch and will just keep walking
	turn_around: "commands :: if(cycle-_last_turned > 30, [set(_last_turned,cycle),set(facing, -facing),animation('turn')])",
	try_facing: "def(int direction) -> commands if(direction != facing,turn_around)",
	feet_are_bouncy: "bool :: true",

	basic_type: "string :: me.type",
	thrown_type: "string :: me.basic_type+'.thrown'", 
	frogourmet_tag: "me.basic_type",
	springiness: "int :: 190",
	spring_amount: "int :: 1200",
	bounce_roundness: "int :: 70",
	default_solid_dimensions: "[string] :: ['enemy','common']",
	
#-------------------------- vars --------------------------#
	_last_turned: { type: "int", default: 0 },
},


editor_info: {
	category: "enemies, general",
},

#-------------------------- setup --------------------------#
on_create: "animation(default_anim)",

#-------------------------- collision handling --------------------------#
on_collide_side: "if(not is_standing, if(abs(velocity_x) > 200, set(velocity_x, -velocity_x*(1d4*0.1)), set(velocity_x, 0)))",
on_collide_head: "set(velocity_y, -velocity_y/2)",
on_collide_feet: "if(abs(velocity_y) > 200 and feet_are_bouncy, [attempt_animation('spring', default_anim),set(velocity_y, -velocity_y/4)], set(velocity_y, 0))",
on_bounced_on: "[sound('bug-bounce.wav'),attempt_animation('spring', default_anim)]",
on_collide_damage: "[handle_death({damage_type: 'neutral'}),die()]",
on_force_death: "[handle_death({damage_type: 'neutral'}),die()]",
on_enter_water: "[handle_death({damage_type: 'neutral'}),die()]",

#-------------------------- animation switching --------------------------#

on_end_turn_anim: "animation(default_anim)",
on_end_hurt_anim: "animation(default_anim)",
on_stuck: "if(not solid(level, midpoint_x, y+self.img_h-10), add(velocity_y, -1200), add(velocity_x, 1d600-300))",
}