{
id: "fish",
prototype: ["hittable"],
hitpoints: 50,
traction_in_water: 1000,
traction_in_air: 0,
friction: 1000,
has_feet: false,
solid_dimensions: ["enemy","common"],
solid_area: [3,3,27,19],
properties: {
	team: "'evil'",
	hurt_velocity_y: "int :: 0",
	hurt_velocity_x: "int :: 0",
	attack_damage: "if(higher_difficulty, 2, 1)",
	taxonomy: "'fish'",
	acquirable_item_drop_value: "int :: 10",					
	points_value: "int :: 16",
	
	target_y: "int :: lib.math.round(_desired_height + sin(cycle*3)*300)",

	player_within: "def(int distance) -> bool ((level.player.midpoint_x > midpoint_x - distance) and (level.player.midpoint_x < midpoint_x + distance) and (level.player.midpoint_y > midpoint_y - distance) and (level.player.midpoint_y < midpoint_y + distance))",
	ideal_x: "int :: int((_x2_bound + _x_bound) / 2)",
	inside_aggro_range: "def(int distance) -> bool (abs(ideal_x - midpoint_x) < distance)",
	default_solid_dimensions: "[string] :: ['enemy','common']",

#-------------------------- vars --------------------------#
	_x_bound: { type: "int", init: "x-200", editor_info: { type: "x", value: "x-200" } },
	_x2_bound: { type: "int", init: "x+200", editor_info: { type: "x", value: "x+200" } },
	_desired_height: { type: "int", init: "y", editor_info: { type: "y", value: "y" } },


#-------------------------- temporary vars --------------------------#
	_in_change_dimensions_fail: { type: "bool", default: false, persistent: false },
},




editor_info: {
	category: "enemies, water",
},

#-------------------------- collision handling --------------------------#
on_collide_side: "[set(velocity_x, 0), facing(-facing)]",
on_collide_damage: "die()",
on_exit_water: "[die()]",

#-------------------------- animation switching --------------------------#
on_end_hurt_anim: "set(animation, 'swim')",
on_end_swim_anim: "if(facing < 0 and x < _x_bound or
	                facing > 0 and x2 > _x2_bound,
					[facing(-facing), animation('swim')],
					animation('swim'))",
on_process_swim: "if(abs(y - target_y) > 10, set(accel_y, (20*if(target_y < mid_y, -1, 1))), [set(accel_y,0)])",
timer_frequency: 10,
on_timer: "if(solid(level, front + facing*90, y, 1, y2 - y),
	            [facing(-facing)])",

#-------------------------- error condition handling --------------------------#
on_change_solid_dimensions_fail: "if(_in_change_dimensions_fail or (not arg.collide_with), die(),
	          [set(_in_change_dimensions_fail, true),
			   fire_event((object <- arg.collide_with), 'blocking_thrown_object'),
			   set(solid_dimensions_in, ['enemy','common']),
			   set(_in_change_dimensions_fail, false)
			  ])",
on_change_animation_failure: "[die()]", //TODO:  this line kills water beetles if they're thrown too close to a cliff.  Needs recovery logic.
}
