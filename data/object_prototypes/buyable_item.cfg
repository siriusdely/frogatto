{
id: "buyable_item",
zorder: -5,
is_strict: true,
prototype: ["item_acquirable"],
respawns: true,
properties: {
	frogatto: "(obj frogatto_playable <- level.player)",
	number_owned: "int :: frogatto.number_of_item(real_item_name)",
	final_price: "int :: price * (1 + number_owned)",
	real_item_name: "string :: regex_replace(type,'buyable_','')", 

	price: "int :: 1",
	short_item_name: "string :: ''",
	description: "string :: ''",

	max_owned: "int :: 1",
	quantity: "int :: 1",
	bob_offset: { type: "int", default: 10, persistent: false },
	should_lock_player_and_do_fancy_acquisition_interlude: "bool :: true",
},

on_create: "[if(number_owned >= max_owned, remove_object(me)),set(bob_offset, 1d100)]",
on_interact: "[fire_event(level.player, 'start_interact')]",
on_acquired: "frogatto.add_item(real_item_name,quantity)",
on_bought: "do_acquisition",
on_talk: "[set(level.player.time_in_animation_delta, 0),
			if(level.player.coins < final_price,
				[
					speech_dialog(self, description + [~The price is ${final_price} coins.~, ~You don't have enough money.~]),
				],
				[
				speech_dialog(self, description + [~The price is ${final_price} coins.~]),
				speech_dialog(self, [~Do you want to buy the ${short_item_name}?~,
					~Yes~,	[
						fire_event('bought'),
						sound('coins-buy.wav'),
						set(level.player.coins, level.player.coins - final_price),
						spawn('text_flash_negative',midpoint_x,midpoint_y-20,1,[set(child.txt,'-'+me.final_price)])
						],
					'default_skip', ~No~, []])
				]),
				set(level.player.time_in_animation_delta, 1)]",
on_end_normal_anim: "animation('normal')",

on_process: "if(not been_acquired, set(velocity_y, 50*sin((bob_offset + cycle)*5+(0.5*1d2))))",

animation: {
	id: "normal",
	interact_area: "all",
},
}
