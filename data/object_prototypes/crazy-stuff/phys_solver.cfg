{
id: "phys_solver",

xeditor_info: {
	category: "aawalker",
	help: "This is a 'phys_solver'-enabled object.\nRotation: Sets the 'rotate' value of an object.\nupdate_physics_nodes_hack:Click to recalculate the physics of the object after you've moved it.",
	var: [{
		name: "rotation",
		value: 0,
		min_value: 0,
		max_value: 359,
	},{
		name: "update_physics_nodes_hack", //The editor changed variable event doesn't fire on x/y change; remove this when it is fixed.
		type: "boolean",
		value: false,
	}],
},
	
properties: {
	register_child: "def(child_object, my_joint, childs_snap) [
		(set(child_object.vars.parent, {obj:self, joint:my_joint, snap:childs_snap, })
			asserting my_joint in keys(self.joints),              //The joint id provided does not exist for self.
			          childs_snap in keys(child_object.snaps) ), //The snap id provided does not exist in the child object.
		set(self.children, self.children + [child_object]),
		]",
	
	joints: "{}",	/*Initial joints for object.
						type: rot[ation], weld, lim (implies lim_max/min values)
						//gen: (Not used, as joint/snap defines.) gen[der]: Can be d[ominate], s[ubordinate] or u[niversal]. d > u > s. Higher values will override lower values.
						loc: The point, relative to 0,0, at which the joint is.*/
	snaps: "[]",	/*In the editor, joints in an object will snap to these.
						loc: as above*/
	get_real: "def(point) zip(rotate_rect(0,0,rotate,point), self.mid_xy, a+b)",
	get_all_real: "def(points) map(values(points), get_real(value))",
	
	at_point: "def(point) get_objects_at_point(point[0], point[1])",
	
	dbg1: "def(crd) spawn('walker-2.dbg', crd[0], crd[1], self.facing, [die()] )",
	dbg: "def(crd) spawn('walker-2.dbg', crd[0], crd[1], self.facing)",
},

vars: {
	physics_class: 'active', 	//static: Not simulated. (Not necessarily immoblie. Might be moved by a script?)
								//active: Not static.
								//passive: Does not exert force. (ornamental)
	parent: null,	//This is a one-to-many relationship. That is to say,
	children: [],	//while an object can have one parent, it may have many
					//children. Parents are simulated before children. No
					//looping allowed, on penalty of infinite loop.
					//Structure: parent: { obj:<object>,
					//                     joint:<key for parent's joint>,
					//                     snap:<key for our snap point> }
					//           children: [ obj, â€¦]
},

on_create: "set(rotate, rotation)", //little hack, rotate not saved properly in editor

xon_editor_changed_variable: "[
	set(rotate, rotation),
	set(update_physics_nodes_hack, false),
	//debug('${time()}: Physics updated.'),
	pp({(self.type):near_joints})
	where near_joints = 
		fold( //This fold returns a list of maps containing two points, 'from' being for our object's joint point and 'to' being for the target object's snap point. (Joints snap into snap points.)
			fold(
				map(
					map(
						joints, 
						get_real(value.loc) ), 
					'my_joint',
					map( // Filter at_point for only +- 1 zorder, if we need to later.
						at_point(my_joint),
						map(
							value.get_all_real(value.snaps),
							{'to': value, 'from': my_joint} ) ) ),
				a+b),
			a+b),
	]",
	
xon_click: "fire_event('editor_changed_variable')",
	
}