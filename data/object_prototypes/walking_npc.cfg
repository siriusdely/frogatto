{
/*Implementor requires "walk" and "turn" animations.
Commands:	begin_pacing - Paces to and fro the limits set in the editor.
			begin_walking - Walks fowards forever.
*/
id: "walking_npc",
prototype: ["standing_npc"],
zorder: "@include data/zorder.cfg:npcs",
friction: 1000,
traction: 1000,

editor_info: {
	category: "NPCs",
	help: "start mode: Action to start the level in.\nturns_at_cliff: If true, the object will turn before it falls off a cliff. Doesn't apply to walking into one.\npotters: The object will sort of faff about a bit.\npotter_timeout: Number of frames the object will faff about for. Frogatto runs af 50 frames per second.",
},

properties: {
#-------------------------- editor items --------------------------#
		min_x: { type: "int", default: 100, editor_info: { type: "int", value: "midpoint_x - 200", } },
		max_x: { type: "int", default: 100, editor_info: { type: "int", value: "midpoint_x + 200", } },
		start_mode: { type: "string", default: "walk", editor_info: { type: "enum", enum_values: ["stand","walk"] } },
		turns_at_cliff: { type: "bool", default: true, editor_info: { type: "bool", value: "true" } },
		potters: { type: "string", default: "never", editor_info: { type: "enum", enum_values: ["never","limits","always"] } },
		potter_timeout: { type: "int", default: 100, editor_info: { type: "int", value: "100" } },

#-------------------------- vars --------------------------#
		_current_special_walk_anim: { type: "string", default: '', persistent: false },	
		_last_started_pottering: { type: "int", default: -100, persistent: false },	
		_last_turned: { type: "int", default: -100, persistent: false },	
		_turns: { type: "bool", default: true, persistent: false },					//Turns at editor-set limits.
		_target: { type: "int|null", default: null, persistent: false },					//If we are walking to a target, this is it.
		_target_callback: { type: "commands", default: null, persistent: false },		//The event to fire, when we reach the target. (Will be fired in addition to reach_target.)


	begin_pacing: "[
		set(start_mode,'walk'),
		set(_target, null),
		set(_turns, true)]",
		
	begin_walking: "[
		set(start_mode,'walk'),
		set(_target, null),
		set(_turns, false)]",
		
	pace_to: "def(int new_min_x, int new_max_x) -> commands [
		if(new_min_x < new_max_x, [
			set(min_x, new_min_x),
			set(max_x, new_max_x),
			],[
			set(min_x, new_max_x),
			set(max_x, new_min_x),
			]),
		self.begin_pacing]",
		
	walk_to: "def(int target_x, commands callback=null) -> commands [
		set(_target, target_x),
		set(_target_callback, callback),
		set(start_mode, 'walk')
		]",

	start_pottering: "[if(1d2,start_standing,turn_around), if(level.cycle - _last_started_pottering > potter_timeout, set(_last_started_pottering,level.cycle))]",
		
	do_regular_behavior: "if(start_mode = 'stand', start_standing, start_walking)",
	
	start_walking: "if(should_turn, if(should_potter, start_pottering, turn_around),
					if(should_potter, start_pottering,
						if(_current_special_walk_anim != '', animation(_current_special_walk_anim), animation('walk')) ))",
	
	should_turn: "if(level.cycle - _last_turned > 10, if(not _target, if(turns_at_cliff and (not is_there_flat_ground_ahead_of_us(cliff_margin)),1,
						if(outside_limits,1,0))
							where margin = 50
							where cliff_margin = 110,
					/* if we DO have a target, then all the above rules are off; go ahead and walk off cliffs, or leave our bounds, the target is more important.*/
					if((_target < self.mid_x and facing > 0) or (_target > self.mid_x and facing <= 0), 1, 0)))",
							
	should_potter: "if(_target, 0,  /*if we have a target, don't potter at all*/
						if(level.cycle - _last_started_pottering < potter_timeout, 1, if(1d2-1, if(potters = 'always', 1, if(potters = 'limits' and outside_limits, 1,0)))))",
	
	outside_limits: "if(_turns,
				if(facing > 0,
					if(mid_x + img_margin > max_x, 1, 0), 
					if(mid_x - img_margin < min_x, 1, 0)),
			) where img_margin = img_w/2",
	
	turn_around: "[animation('turn'), set(facing, -facing), set(_last_turned, level.cycle)]",
	
	is_at_target: "if(_target and ((_target < self.mid_x+10 and facing > 0) or (_target >= self.mid_x-10 and facing <= 0)), 1, 0)",
	
	walking_animations: "[string] :: ['walk']", //a list of walking animations - inheritors may supply more than this
	
	check_for_special_walk_anim: "if(animation in walking_animations and animation != 'walk', set(_current_special_walk_anim, animation), set(_current_special_walk_anim, ''))",
},
	

on_create: "do_regular_behavior",
on_end_anim: "if(not animation in ['stand','turn','walk'],animation(animation),   if(_paused, start_standing,do_regular_behavior))",
			/*if we're doing some special animation, like the butler-kitty, we're expected to self-handle termination*/
					
on_resume: "do_regular_behavior",

on_process: "[if(animation in walking_animations, [check_for_special_walk_anim, if(should_turn, turn_around,
					if(self.is_at_target, fire_event(self,'reach_target') ))])]",


//note - it's REALLY important that target_callback be last - if this gets fired during a dialogue, the other commands after target_callback don't get executed until the dialogue is finished (which essentially breaks target-seeking entirely)	
on_reach_target: "[[set(start_mode, 'stand'),start_standing], set(_target,null)
, _target_callback]",

}
