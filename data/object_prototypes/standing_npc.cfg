{
/*Implementor requires "stand" animation.
Properties: stand - The character starts standing in one place.
*/
id: "standing_npc",
prototype: ["standard_values"],
zorder: "@include data/zorder.cfg:npcs",
is_strict: true,

collide_dimensions: ["~npc"],
solid_dimensions: ["~npc"],


editor_info: {
	category: "NPCs",
},

properties: {
#--------------------------	 editor items --------------------------#
	start_mode: { type: "string", default: "stand", persistent: false, set: "set(_data, value) asserting _data = null | 'Attempted to set a property we want to be immutable'" },
	default_speech_text: { type: "string", default: "", editor_info: { type: "string", value: "" } },
	turning_behaviour: { type: "string", default: "face_player", editor_info: { type: "enum", enum_values: ["face_player","random","never"] } },


#-------------------------- core functionality --------------------------#
	record_having_conversation__section: "def(int section) -> commands
											level.player.store_event('had_section_'+section+'_of_conversation_with_'+me.label+'_on_level_'+level.id, 1)",
	had_conversation_with_me_already__section: "def(int section) -> bool
											if(level.player.get_stored_event('had_section_'+section+'_of_conversation_with_'+me.label+'_on_level_'+level.id) = 1, true, false)",

	shadow_size: "string|null :: 'medium_small'",
	start_standing: "animation('stand')",
	do_pause: "[animation('stand'), set(_paused,true)]",
	do_resume: "[fire_event('resume'), set(_paused,false)]",

	_paused: { type: "bool", default: false},	
#-------------------------- core functionality --------------------------#
	//a formula that can be used to draw the character's attention to an object, and make them do whatever in response to it.
	consider_object: {type: "string", default: "null" },
},


on_create: "[if(start_mode, animation(start_mode), start_standing),fire_event('enter_level')]",

on_enter_level: "if(shadow_size != null,
					if(preexisting_shadow = null, spawn('shadow_'+shadow_size,mid_x,mid_y,{parent: me})
						)   where preexisting_shadow = find(level.chars, value.spawned_by = me and value is obj shadow))",

on_being_removed: "map(filter(spawned_children, value is obj shadow), remove_object(value))",


on_end_stand_anim: "[
		animation('stand'),
		switch(turning_behaviour,
			'face_player', set(facing, if(level.player.x < x, -1, 1)),
			'random', if(not 1d2-1, set(facing, 1d2-1)),
		)
	]",
	

on_interact: "[
	set(level.zoom, 2), 
	do_pause,
	set(level.player.control_lock, ['ctrl_left']), 
	
	set(level.player.is_running, false) asserting level.player is obj frogatto_playable, 
	schedule(20, 
		fire_event('have_distance')),
	]",

on_have_distance: "[
	set(level.player.control_lock, ['ctrl_right']), 
	schedule(2, 
		fire_event('start_talking')),
	]",

on_start_talking: "[
	set(level.player.control_lock, null), 
	fire_event('talk'), 
	set(level.zoom, 1),
	do_resume,
	]",

on_talk: "if(default_speech_text, speech_dialog(null, [default_speech_text]))",
}
