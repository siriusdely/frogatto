{
id: "door",
zorder: "@include data/zorder.cfg:wooden_platform_objects",
zsub_order: 40,
is_strict: true,
collide_dimensions: ["~key"],
properties: {
	locks: "filter(level.chars, 'char', char.type = 'padlock' and abs(lib.math.length(context.me, char)) < 100)",
	test_locks: "def(object possible_key) -> commands map(locks, 'lock', 
								if(lock.variations = possible_key.variations, 
									[fire_event(lock, 'unlock'), 
										if(frogatto.swallowed_object != null and frogatto.swallowed_object = possible_key, frogatto.empty_stomach, remove_object(possible_key))])) where frogatto = (obj frogatto_playable <- level.player)",


	_player_opened: { type: "bool", default: false, persistent: false },

	_dest_level: { type: "string", default: '', editor_info: { type: "level" }},
	_dest_door: { type: "string", default: '', editor_info: { type: "label", info: "_dest_level" }},
	_goes_to_illuminated_place: { type: "bool", default: false, editor_info: { type: "bool" }},
},
on_start_level: "if(_goes_to_illuminated_place, [add(variations, ['goes_to_illuminated_place']),animation('normal')])",
on_interact: "[fire_event(frogatto, 'start_interact'),
		if(locks, if(frogatto.swallowed_object != null and frogatto.swallowed_object is obj padlock_key, test_locks(frogatto.swallowed_object)), [set(_player_opened, true),fire_event('open')])] where frogatto = (obj frogatto_playable <- level.player)",
on_open: "[
			if(cycle > 20,sound('DoorOpen.ogg')),
			animation('open')
		]",
on_enter: "[if(_player_opened and _dest_door != '', teleport(if(_dest_level != '' and _dest_level != level.id, _dest_level,null), _dest_door, 'iris')),
	           [ schedule(60,set(animation, 'close')), set(_player_opened, false)] ]",
on_collide_object: "[test_locks(arg.collide_with)]",
on_talk: "if(locks, speech_dialog(level.player, set(level.player.animation,'emote_geez'),[~Nope, it's locked.~]))",
on_end_open_anim: "animation('ajar')",
on_end_normal_anim: "animation('normal')",
on_end_ajar_anim: "animation('ajar')",
on_end_close_anim: "[animation('normal'),sound('DoorShut.ogg')]",
editor_info: {
	category: "buildings, portals",
	help: "If the destination level and door are not set, this will be non-interactive
		scenery.  Locking this door is trivial - place the 'padlock' atop it, and it will
		autodetect the presence of the lock, and also any interactions with 'padlock_key's,
		correctly unlocking only for the appropriate color.",
},
variations: {
	goes_to_illuminated_place: "null",
},
}
