{
id: "player_controlled_platformer_character",
solid_dimensions: ["player","common","boss"],
vehicle: false,
is_human: true,
prototype: ["player_controlled"],
collide_dimensions: ["player","enemy","hazard","item"],

properties: {
	hurt_velocity_y: "-800",
	hurt_velocity_x: "0",

	can_jump: "def() -> bool
	  bool(bool(is_standing) and (not animation in ['interact', 'fall', 'jump', 'start_jump']))",

	scripted_move_to_x: "def(int target_x, int target_facing, commands callback) -> commands [
		set(me.scripted_target_x, target_x),
		set(me.scripted_target_facing, target_facing),
		set(me.scripted_move_callback, callback),
		fire_event(me, 'handle_move_script'),
	]",
	
	/*TODO:  these might be changes per frame, not "something to tween to"*/
	player_damage_screen_flash: "def(int damage_amounts) -> commands
		if(damage_amounts > 2 or damage_amounts >= hitpoints, 
			screen_flash([255, 0, 0,255], [255, 0, 0,0], 4),  
			if(damage_amounts = 2, 
				screen_flash([255, 0, 0,200], [255, 0, 0,0], 3), 
				screen_flash([255, 0, 0,70], [255, 0, 0,0], 2)))",
	
	character_specific_damage_response: "def(string damage_type, int amount) -> commands null",
	
	player_damage_response: "def(string damage_type, int amount) -> commands [
		play_haptic_effect('rumble'),
		player_damage_screen_flash(amount),
		set(solid_dimensions_in, ['player']),
		character_specific_damage_response(damage_type, amount)
	]",
	
	
	posthit_invicibility_period: "int :: 100",
	
	float: "def() -> commands [
		animation('swim_side_idle'), 
		set(has_feet, false),
		if(IPHONE_SYSTEM, set(underwater_controls, underwater)),
	]",
		
#-------------------------- vars --------------------------#

	scripted_target_x: { type: "int|null", default: null },
	scripted_target_facing: { type: "int|null", default: null },
	scripted_move_callback: { type: "commands", default: null },

#-------------------------- temporary vars --------------------------#

	_last_standing_cycle: { type: "int", default: -1, persistent: false },
	left: 0,
	right: 0,
	lookup_time:{ type: "int", default: 0, persistent: false },
	lookdown_time: { type: "int", default: 0, persistent: false },
	fired_talk: { type: "int", default: 0, persistent: false },
	talking_to: { type: "custom_obj|null", default: null, persistent: false },
	interacting_with:  { type: "custom_obj|null", default: null, persistent: false },
	should_die_from_falling: { type: "bool", default: true, persistent: false },
},

on_enter_level: "set(should_die_from_falling, true)",
on_end_hurt_anim: "animation('stand')",

on_handle_move_script: "
	if(abs(midpoint_x - scripted_target_x) < 10,
		if(abs(scripted_target_facing) = 1 and facing != scripted_target_facing, [
			set(control_lock, if(scripted_target_facing > 0, ['ctrl_right'], ['ctrl_left'])), 
			schedule(1, fire_event('handle_move_script')),
		],[
			set(control_lock, null),
			set(me.scripted_target_x, null),
			set(me.scripted_target_facing, null),
			set(me.scripted_move_callback, null),
			scripted_move_callback,
		]),
	[
		set(control_lock, if(scripted_target_x > midpoint_x, ['ctrl_right'], ['ctrl_left'])), 
		schedule(1, fire_event('handle_move_script')),
	])	asserting scripted_target_x is int
		asserting scripted_target_facing is int",

timer_frequency: 2,
on_timer: "[
	//Handle ending of invincibility.
	if((level.cycle - time_last_hit)/2 <= 50 and (level.cycle - time_last_hit)/2 > 1,
		set(solid_dimensions_in, ['player', 'common', 'boss'])),
	if(not is_invincible_posthit, [
		if(underwater and water_object,
			if( the_liquid.liquid_damage, [
				add(hitpoints, -the_liquid.liquid_damage),
				display_hurt_visuals({damage_type: the_liquid.damage_type},the_liquid.liquid_damage),
				if(water_object.type = 'acid_controller', [		/*TODO:  port this to hittable?*/
					sound('acid.ogg'),
					spawn('acid_burn_particles',mid_x,mid_y,1,set(child.parent,me)),
				]),
			set(time_last_hit, level.cycle)]) where the_liquid = (obj liquid <- water_object)
		),
		set(alpha,255),
	]),
]",
			
on_ctrl_jump: "if(can_jump(), [
	if(not ctrl_down, [
		if('start_jump' in available_animations, animation('start_jump'), animation('jump')),
		add(velocity_x, velocity_x),
		set(velocity_y, -jump_power)
	]),
	
	if(not ctrl_down or underwater, [
		set(jumpCloud.parent, self.standing_on),
		add_object(jumpCloud),
	] where jumpCloud = object('dust_cloud_jump', midpoint_x, y2 - 22, facing)),
	
	if(is_standing_on_platform,
		if(ctrl_down,
			[set(fall_through_platforms, 10),
			set(velocity_y, velocity_y + jump_power/10)]
		)
	),
])",
		
on_ctrl_up: "
	if(abs(velocity_x) < 100 and is_standing, 
		map(
				filter(level.active_chars, 'char', collides(context.me, 'body', char, 'interact')), 
				'obj', [
			set(interacting_with, obj),
			fire_event(obj, 'interact')
		])
	)",
	
on_start_interact: "[
	animation('interact'), 
	set(fired_talk, 0),
]",

on_interacting: "if(interacting_with and fired_talk = 0, [
	set(fired_talk, 1), 
	fire_event(interacting_with, 'talk'),
])",

on_end_interact_anim: "animation('stand')",

#-------------------------- error condition handling --------------------------#
//if the player gets 'stuck' in a narrow gap, this gets them out by automatically making them jump
on_stuck: "if(not underwater, 
	if(not solid(level, midpoint_x, y+self.img_h-10), 
		add(velocity_y, -jump_power), 
		add(velocity_x, if(facing=1, 300, -300))))",

//if we change our solid dimensions -- i.e. try to come back from being hurt, and we can't because we're on top of another solid object, then we take more damage
on_change_solid_dimensions_fail: "if(not is_invincible_posthit, [
	add(hitpoints, -1), 
	set(time_last_hit, level.cycle),
])",

#-------------------------- damage handling --------------------------#

on_collide_damage: "[get_hit_sourceless('stab', int(arg.surface_damage)), cause_flinch(null)]",

//when falling, if we are standing for two consecutive frames, change us to a standing animation.
on_process_fall: "
	if(is_standing, 
		if(_last_standing_cycle = cycle-1, 
			animation('stand'), 
			set(_last_standing_cycle, cycle)))",

//check if we end up on a slope in which case we re-calculate our standing.
on_enter_stand_anim: "if(abs(slope_standing_on) > 20, start_standing)",
on_enter_stand_up_slope_anim: "if(slope_standing_on*facing > -20, start_standing)",
on_enter_stand_down_slope_anim: "if(slope_standing_on*facing < 20, start_standing)",
}
