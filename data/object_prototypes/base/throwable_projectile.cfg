/*
 a general prototype for ammunition that lies around on the ground/in-trees/etc, and can be swallowed and spat by the player.  NOT meant for general enemies, just meant for otherwise inert projectiles that can be spat.  Expected to have a limited amount of custom behavior overrides, especially for stuff like how the thunder-melons explode on contact.

 to make projectiles hangable in a tree, the only necessary change is to make their normal animation have an accel_y of zero.
*/

{
id: "throwable_projectile",
prototype: ["throwable"],
mass: 5,
friction: 1000,
traction: 1000,
solid_area: [1,0,14,15],
zorder: "@include data/zorder.cfg:player",
zsub_order: -2,
always_active: true,
affected_by_currents: true,

object_level_collisions: true,
solid_dimensions: [],

properties: {
	swallowable: "bool :: true",

#-------------------------- core functionality --------------------------#
	team: "string :: if(is_player_ammo,'player',if(velocity_x != 0 or velocity_y != 0, if(time_spat, 'player','evil'), 'evil_harmless'))",

	attack_damage: "int :: standard_thrown_damage",
	handle_knockback: "def(obj hittable collide_with) -> commands execute(me,[add(velocity_x, collide_with.facing * collide_with.attack_knockback),add(velocity_y, collide_with.facing * collide_with.attack_knockback), if('on_back' in me.available_animations,[animation('on_back'),fire_event('spat')])])",

	on_back_duration: "int :: 200",
	springiness: "int :: 0",
	spring_amount: "int :: 0",
	bounce_roundness: "int :: 0",
	
	play_bounce_sound:  "commands :: [
		if(material_sound='smallmetal', sound('collide-metal'+1d10+'.wav')),
		if(material_sound='metal',      sound('collide-metal-heavy'+1d7+'.wav')),
		if(material_sound='coconut',    sound('hopper-block1.wav')), 
		if(material_sound='fruit',      sound('collide-fruit'+1d3+'.wav')),
	]",
},

on_die: "death_effects('medium')",


#-------------------------- gets set by frogatto immediately after the creature is launched --------------------------#
on_spat: "[proto_event('throwable','spat'),set(_on_back_count, 0)]",

#-------------------------- handle ending the on_back timeout --------------------------#
on_return_to_normal: "die()",
on_end_anim: "if(_on_back_count > on_back_duration, fire_event('return_to_normal'), if(animation != 'normal' and is_standing and 'on_back' in available_animations, animation('on_back'), animation(animation)))",

#-------------------------- handle on_back twitching --------------------------#
on_process_on_back: "[add(_on_back_count,1),if(_on_back_count > (on_back_duration*3)/4, set(brightness, if(cycle%6 > 2, 256, 512)))]",
#-------------------------- disable body collisions --------------------------#
on_collide_object_body: "",

#-------------------------- handle collisions during thrown animations --------------------------#
on_collide_head: "[play_bounce_sound,set(velocity_y, -velocity_y/2), if(abs(velocity_y) >1000, impact_cloud(midpoint_x,y,'large'), if(abs(velocity_y) >30, impact_cloud(midpoint_x,y,'small')))]",
on_collide_side: "[play_bounce_sound,set(velocity_x, -velocity_x/2), if(abs(velocity_x) >1000, impact_cloud(midpoint_x,y2,'large'), if(abs(velocity_x) >30, impact_cloud(midpoint_x,y2,'small')))]",
on_collide_feet: "[play_bounce_sound,set(rotate, slope_standing_on), if(abs(velocity_y) >1000, impact_cloud(midpoint_x,y2,'large'), if(abs(velocity_y) >100, impact_cloud(midpoint_x,y2,'small'))),
		if(arg.collide_with is obj hittable, [
				if(collide_with.get_hit_by and collide_with.team != team, [collide_with.get_hit_by(me), die()]),
				if(animation = 'thrown' and velocity_y + abs(velocity_x) > 600,
	                    [set(velocity_y, -(velocity_y*3)/5 - (velocity_x*slope_standing_on)/90), set(velocity_x, (velocity_x*4)/5 + (velocity_y*slope_standing_on)/90)], if((animation = 'thrown'), [set(_on_back_count, 0), if('on_back' in available_animations, animation('on_back'))]))]  where collide_with = (obj hittable <- arg.collide_with))]",
on_bounced_on: "if(animation = 'on_back', die())",
on_collide: "[if(material_sound='metal', sound('collide-metal-heavy'+1d7+'.wav'))]",
on_enter_water: "die()",

}
